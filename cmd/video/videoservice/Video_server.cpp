// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

#include "Video.h"
#include <thrift/protocol/TBinaryProtocol.h>
#include <thrift/server/TSimpleServer.h>
#include <thrift/transport/TServerSocket.h>
#include <thrift/transport/TBufferTransports.h>
#include "../../web/conf.hh"

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;

class VideoHandler : virtual public VideoIf {
 public:
  VideoHandler() {
    // Your initialization goes here
  }

  void Video_Upload(Video_Upload_RecvInfo& _return, const Video_Upload_SendInfo& info) {
    //。。。。逻辑代码 
    _return.status = 200;
    _return.min = info.min;
    _return.sec = info.sec;
    _return.msec = info.msec;
    _return.roomId = info.roomId;
    _return.userId = info.userId;
    _return.type = info.type;
    printf("Video_Upload , %s \n" , info.info.c_str());
    return;
  }

  void Video_Download(Video_Download_RecvInfo& _return, const Video_Download_SendInfo& info) {
    // Your implementation goes here
    printf("Video_Download\n");
  }

};

int main(int argc, char **argv) {
  int port = VIDEO_POST;
  ::std::shared_ptr<VideoHandler> handler(new VideoHandler());
  ::std::shared_ptr<TProcessor> processor(new VideoProcessor(handler));
  ::std::shared_ptr<TServerTransport> serverTransport(new TServerSocket(port));
  ::std::shared_ptr<TTransportFactory> transportFactory(new TBufferedTransportFactory());
  ::std::shared_ptr<TProtocolFactory> protocolFactory(new TBinaryProtocolFactory());

  TSimpleServer server(processor, serverTransport, transportFactory, protocolFactory);
  server.serve();
  return 0;
}

