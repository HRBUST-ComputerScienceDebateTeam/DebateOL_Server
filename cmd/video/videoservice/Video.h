/**
 * Autogenerated by Thrift Compiler (0.19.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef Video_H
#define Video_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include <memory>
#include "video_types.h"



#ifdef _MSC_VER
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class VideoIf {
 public:
  virtual ~VideoIf() {}
  virtual void Video_Upload(Video_Upload_RecvInfo& _return, const Video_Upload_SendInfo& info) = 0;
  virtual void Video_Download(Video_Download_RecvInfo& _return, const Video_Download_SendInfo& info) = 0;
  virtual void Video_Clean(const Video_Clean_SendInfo& info) = 0;
};

class VideoIfFactory {
 public:
  typedef VideoIf Handler;

  virtual ~VideoIfFactory() {}

  virtual VideoIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(VideoIf* /* handler */) = 0;
  };

class VideoIfSingletonFactory : virtual public VideoIfFactory {
 public:
  VideoIfSingletonFactory(const ::std::shared_ptr<VideoIf>& iface) : iface_(iface) {}
  virtual ~VideoIfSingletonFactory() {}

  virtual VideoIf* getHandler(const ::apache::thrift::TConnectionInfo&) override {
    return iface_.get();
  }
  virtual void releaseHandler(VideoIf* /* handler */) override {}

 protected:
  ::std::shared_ptr<VideoIf> iface_;
};

class VideoNull : virtual public VideoIf {
 public:
  virtual ~VideoNull() {}
  void Video_Upload(Video_Upload_RecvInfo& /* _return */, const Video_Upload_SendInfo& /* info */) override {
    return;
  }
  void Video_Download(Video_Download_RecvInfo& /* _return */, const Video_Download_SendInfo& /* info */) override {
    return;
  }
  void Video_Clean(const Video_Clean_SendInfo& /* info */) override {
    return;
  }
};

typedef struct _Video_Video_Upload_args__isset {
  _Video_Video_Upload_args__isset() : info(false) {}
  bool info :1;
} _Video_Video_Upload_args__isset;

class Video_Video_Upload_args {
 public:

  Video_Video_Upload_args(const Video_Video_Upload_args&);
  Video_Video_Upload_args& operator=(const Video_Video_Upload_args&);
  Video_Video_Upload_args() noexcept {
  }

  virtual ~Video_Video_Upload_args() noexcept;
  Video_Upload_SendInfo info;

  _Video_Video_Upload_args__isset __isset;

  void __set_info(const Video_Upload_SendInfo& val);

  bool operator == (const Video_Video_Upload_args & rhs) const
  {
    if (!(info == rhs.info))
      return false;
    return true;
  }
  bool operator != (const Video_Video_Upload_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Video_Video_Upload_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Video_Video_Upload_pargs {
 public:


  virtual ~Video_Video_Upload_pargs() noexcept;
  const Video_Upload_SendInfo* info;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Video_Video_Upload_result__isset {
  _Video_Video_Upload_result__isset() : success(false) {}
  bool success :1;
} _Video_Video_Upload_result__isset;

class Video_Video_Upload_result {
 public:

  Video_Video_Upload_result(const Video_Video_Upload_result&) noexcept;
  Video_Video_Upload_result& operator=(const Video_Video_Upload_result&) noexcept;
  Video_Video_Upload_result() noexcept {
  }

  virtual ~Video_Video_Upload_result() noexcept;
  Video_Upload_RecvInfo success;

  _Video_Video_Upload_result__isset __isset;

  void __set_success(const Video_Upload_RecvInfo& val);

  bool operator == (const Video_Video_Upload_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Video_Video_Upload_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Video_Video_Upload_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Video_Video_Upload_presult__isset {
  _Video_Video_Upload_presult__isset() : success(false) {}
  bool success :1;
} _Video_Video_Upload_presult__isset;

class Video_Video_Upload_presult {
 public:


  virtual ~Video_Video_Upload_presult() noexcept;
  Video_Upload_RecvInfo* success;

  _Video_Video_Upload_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Video_Video_Download_args__isset {
  _Video_Video_Download_args__isset() : info(false) {}
  bool info :1;
} _Video_Video_Download_args__isset;

class Video_Video_Download_args {
 public:

  Video_Video_Download_args(const Video_Video_Download_args&) noexcept;
  Video_Video_Download_args& operator=(const Video_Video_Download_args&) noexcept;
  Video_Video_Download_args() noexcept {
  }

  virtual ~Video_Video_Download_args() noexcept;
  Video_Download_SendInfo info;

  _Video_Video_Download_args__isset __isset;

  void __set_info(const Video_Download_SendInfo& val);

  bool operator == (const Video_Video_Download_args & rhs) const
  {
    if (!(info == rhs.info))
      return false;
    return true;
  }
  bool operator != (const Video_Video_Download_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Video_Video_Download_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Video_Video_Download_pargs {
 public:


  virtual ~Video_Video_Download_pargs() noexcept;
  const Video_Download_SendInfo* info;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Video_Video_Download_result__isset {
  _Video_Video_Download_result__isset() : success(false) {}
  bool success :1;
} _Video_Video_Download_result__isset;

class Video_Video_Download_result {
 public:

  Video_Video_Download_result(const Video_Video_Download_result&);
  Video_Video_Download_result& operator=(const Video_Video_Download_result&);
  Video_Video_Download_result() noexcept {
  }

  virtual ~Video_Video_Download_result() noexcept;
  Video_Download_RecvInfo success;

  _Video_Video_Download_result__isset __isset;

  void __set_success(const Video_Download_RecvInfo& val);

  bool operator == (const Video_Video_Download_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Video_Video_Download_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Video_Video_Download_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Video_Video_Download_presult__isset {
  _Video_Video_Download_presult__isset() : success(false) {}
  bool success :1;
} _Video_Video_Download_presult__isset;

class Video_Video_Download_presult {
 public:


  virtual ~Video_Video_Download_presult() noexcept;
  Video_Download_RecvInfo* success;

  _Video_Video_Download_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Video_Video_Clean_args__isset {
  _Video_Video_Clean_args__isset() : info(false) {}
  bool info :1;
} _Video_Video_Clean_args__isset;

class Video_Video_Clean_args {
 public:

  Video_Video_Clean_args(const Video_Video_Clean_args&) noexcept;
  Video_Video_Clean_args& operator=(const Video_Video_Clean_args&) noexcept;
  Video_Video_Clean_args() noexcept {
  }

  virtual ~Video_Video_Clean_args() noexcept;
  Video_Clean_SendInfo info;

  _Video_Video_Clean_args__isset __isset;

  void __set_info(const Video_Clean_SendInfo& val);

  bool operator == (const Video_Video_Clean_args & rhs) const
  {
    if (!(info == rhs.info))
      return false;
    return true;
  }
  bool operator != (const Video_Video_Clean_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Video_Video_Clean_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Video_Video_Clean_pargs {
 public:


  virtual ~Video_Video_Clean_pargs() noexcept;
  const Video_Clean_SendInfo* info;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Video_Video_Clean_result {
 public:

  Video_Video_Clean_result(const Video_Video_Clean_result&) noexcept;
  Video_Video_Clean_result& operator=(const Video_Video_Clean_result&) noexcept;
  Video_Video_Clean_result() noexcept {
  }

  virtual ~Video_Video_Clean_result() noexcept;

  bool operator == (const Video_Video_Clean_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const Video_Video_Clean_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Video_Video_Clean_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Video_Video_Clean_presult {
 public:


  virtual ~Video_Video_Clean_presult() noexcept;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class VideoClient : virtual public VideoIf {
 public:
  VideoClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  VideoClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void Video_Upload(Video_Upload_RecvInfo& _return, const Video_Upload_SendInfo& info) override;
  void send_Video_Upload(const Video_Upload_SendInfo& info);
  void recv_Video_Upload(Video_Upload_RecvInfo& _return);
  void Video_Download(Video_Download_RecvInfo& _return, const Video_Download_SendInfo& info) override;
  void send_Video_Download(const Video_Download_SendInfo& info);
  void recv_Video_Download(Video_Download_RecvInfo& _return);
  void Video_Clean(const Video_Clean_SendInfo& info) override;
  void send_Video_Clean(const Video_Clean_SendInfo& info);
  void recv_Video_Clean();
 protected:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class VideoProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  ::std::shared_ptr<VideoIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext) override;
 private:
  typedef  void (VideoProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_Video_Upload(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_Video_Download(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_Video_Clean(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  VideoProcessor(::std::shared_ptr<VideoIf> iface) :
    iface_(iface) {
    processMap_["Video_Upload"] = &VideoProcessor::process_Video_Upload;
    processMap_["Video_Download"] = &VideoProcessor::process_Video_Download;
    processMap_["Video_Clean"] = &VideoProcessor::process_Video_Clean;
  }

  virtual ~VideoProcessor() {}
};

class VideoProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  VideoProcessorFactory(const ::std::shared_ptr< VideoIfFactory >& handlerFactory) noexcept :
      handlerFactory_(handlerFactory) {}

  ::std::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo) override;

 protected:
  ::std::shared_ptr< VideoIfFactory > handlerFactory_;
};

class VideoMultiface : virtual public VideoIf {
 public:
  VideoMultiface(std::vector<std::shared_ptr<VideoIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~VideoMultiface() {}
 protected:
  std::vector<std::shared_ptr<VideoIf> > ifaces_;
  VideoMultiface() {}
  void add(::std::shared_ptr<VideoIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void Video_Upload(Video_Upload_RecvInfo& _return, const Video_Upload_SendInfo& info) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->Video_Upload(_return, info);
    }
    ifaces_[i]->Video_Upload(_return, info);
    return;
  }

  void Video_Download(Video_Download_RecvInfo& _return, const Video_Download_SendInfo& info) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->Video_Download(_return, info);
    }
    ifaces_[i]->Video_Download(_return, info);
    return;
  }

  void Video_Clean(const Video_Clean_SendInfo& info) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->Video_Clean(info);
    }
    ifaces_[i]->Video_Clean(info);
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class VideoConcurrentClient : virtual public VideoIf {
 public:
  VideoConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot, std::shared_ptr< ::apache::thrift::async::TConcurrentClientSyncInfo> sync) : sync_(sync)
{
    setProtocol(prot);
  }
  VideoConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot, std::shared_ptr< ::apache::thrift::async::TConcurrentClientSyncInfo> sync) : sync_(sync)
{
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void Video_Upload(Video_Upload_RecvInfo& _return, const Video_Upload_SendInfo& info) override;
  int32_t send_Video_Upload(const Video_Upload_SendInfo& info);
  void recv_Video_Upload(Video_Upload_RecvInfo& _return, const int32_t seqid);
  void Video_Download(Video_Download_RecvInfo& _return, const Video_Download_SendInfo& info) override;
  int32_t send_Video_Download(const Video_Download_SendInfo& info);
  void recv_Video_Download(Video_Download_RecvInfo& _return, const int32_t seqid);
  void Video_Clean(const Video_Clean_SendInfo& info) override;
  int32_t send_Video_Clean(const Video_Clean_SendInfo& info);
  void recv_Video_Clean(const int32_t seqid);
 protected:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  std::shared_ptr< ::apache::thrift::async::TConcurrentClientSyncInfo> sync_;
};

#ifdef _MSC_VER
  #pragma warning( pop )
#endif



#endif
