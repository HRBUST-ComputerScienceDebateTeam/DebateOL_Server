// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.
#include "../../../pkg/Sidecar/sidecar.h"
#include "../../conf.hh"
#include "Echo.h"
#include <iostream>
#include <thrift/protocol/TBinaryProtocol.h>
#include <thrift/server/TSimpleServer.h>
#include <thrift/transport/TBufferTransports.h>
#include <thrift/transport/TServerSocket.h>
#include <time.h>
using namespace std;

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;

class EchoHandler : virtual public EchoIf {
public:
    EchoHandler() {
        // Your initialization goes here
        cout << "[*]echo服务开启" << endl;
    }
    std::string gettime() {
        time_t timep;
        time( &timep );
        std::string rets = ctime( &timep );
        return rets;
    }

    void Echo_Send( Echo_RecvInfo& _return, const Echo_SendInfo& info ) {
        std::string now = gettime();
        std::cout << "Echo_Send - " << now << std::endl;
        _return.id   = info.id;
        _return.info = info.info;
        _return.time = now;
    }
};

int main( int argc, char** argv ) {
    int                                    port = ECHO_PORT;
    ::std::shared_ptr< EchoHandler >       handler( new EchoHandler() );
    ::std::shared_ptr< TProcessor >        processor( new EchoProcessor( handler ) );
    ::std::shared_ptr< TServerTransport >  serverTransport( new TServerSocket( port ) );
    ::std::shared_ptr< TTransportFactory > transportFactory( new TBufferedTransportFactory() );
    ::std::shared_ptr< TProtocolFactory >  protocolFactory( new TBinaryProtocolFactory() );

    TSimpleServer server( processor, serverTransport, transportFactory, protocolFactory );

    int pid = fork();
    if ( pid == 0 ) {
        //开启边车
        sleep( 3 );
        Sidecar sidecar( ECHO_NAME, "127.0.0.1", const_cast< char* >( to_string( ECHO_PORT + 1000 ).c_str() ), "127.0.0.1", const_cast< char* >( to_string( ECHO_PORT ).c_str() ) );
        if ( sidecar.start() != 0 ) {
            wait( NULL );
        }
    } else {
        server.serve();
    }
    return 0;
}
