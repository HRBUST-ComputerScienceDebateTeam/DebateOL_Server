/**
 * Autogenerated by Thrift Compiler (0.19.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "echo_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>




Echo_SendInfo::~Echo_SendInfo() noexcept {
}


void Echo_SendInfo::__set_id(const int32_t val) {
  this->id = val;
}

void Echo_SendInfo::__set_info(const std::string& val) {
  this->info = val;
}

void Echo_SendInfo::__set_sendtime(const int32_t val) {
  this->sendtime = val;
}
std::ostream& operator<<(std::ostream& out, const Echo_SendInfo& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t Echo_SendInfo::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->id);
          this->__isset.id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->info);
          this->__isset.info = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->sendtime);
          this->__isset.sendtime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Echo_SendInfo::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("Echo_SendInfo");

  xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("info", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->info);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("sendtime", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->sendtime);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Echo_SendInfo &a, Echo_SendInfo &b) {
  using ::std::swap;
  swap(a.id, b.id);
  swap(a.info, b.info);
  swap(a.sendtime, b.sendtime);
  swap(a.__isset, b.__isset);
}

Echo_SendInfo::Echo_SendInfo(const Echo_SendInfo& other0) {
  id = other0.id;
  info = other0.info;
  sendtime = other0.sendtime;
  __isset = other0.__isset;
}
Echo_SendInfo& Echo_SendInfo::operator=(const Echo_SendInfo& other1) {
  id = other1.id;
  info = other1.info;
  sendtime = other1.sendtime;
  __isset = other1.__isset;
  return *this;
}
void Echo_SendInfo::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "Echo_SendInfo(";
  out << "id=" << to_string(id);
  out << ", " << "info=" << to_string(info);
  out << ", " << "sendtime=" << to_string(sendtime);
  out << ")";
}


Echo_RecvInfo::~Echo_RecvInfo() noexcept {
}


void Echo_RecvInfo::__set_id(const int32_t val) {
  this->id = val;
}

void Echo_RecvInfo::__set_info(const std::string& val) {
  this->info = val;
}

void Echo_RecvInfo::__set_time(const std::string& val) {
  this->time = val;
}

void Echo_RecvInfo::__set_sendtime(const int32_t val) {
  this->sendtime = val;
}
std::ostream& operator<<(std::ostream& out, const Echo_RecvInfo& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t Echo_RecvInfo::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->id);
          this->__isset.id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->info);
          this->__isset.info = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->time);
          this->__isset.time = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->sendtime);
          this->__isset.sendtime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Echo_RecvInfo::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("Echo_RecvInfo");

  xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("info", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->info);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("time", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->time);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("sendtime", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->sendtime);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Echo_RecvInfo &a, Echo_RecvInfo &b) {
  using ::std::swap;
  swap(a.id, b.id);
  swap(a.info, b.info);
  swap(a.time, b.time);
  swap(a.sendtime, b.sendtime);
  swap(a.__isset, b.__isset);
}

Echo_RecvInfo::Echo_RecvInfo(const Echo_RecvInfo& other2) {
  id = other2.id;
  info = other2.info;
  time = other2.time;
  sendtime = other2.sendtime;
  __isset = other2.__isset;
}
Echo_RecvInfo& Echo_RecvInfo::operator=(const Echo_RecvInfo& other3) {
  id = other3.id;
  info = other3.info;
  time = other3.time;
  sendtime = other3.sendtime;
  __isset = other3.__isset;
  return *this;
}
void Echo_RecvInfo::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "Echo_RecvInfo(";
  out << "id=" << to_string(id);
  out << ", " << "info=" << to_string(info);
  out << ", " << "time=" << to_string(time);
  out << ", " << "sendtime=" << to_string(sendtime);
  out << ")";
}


