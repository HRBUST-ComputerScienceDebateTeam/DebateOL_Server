/**
 * Autogenerated by Thrift Compiler (0.19.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "room_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>




Room_GetBaseInfo_SendInfo::~Room_GetBaseInfo_SendInfo() noexcept {
}


void Room_GetBaseInfo_SendInfo::__set_type(const int32_t val) {
  this->type = val;
}

void Room_GetBaseInfo_SendInfo::__set_jwt_token(const std::string& val) {
  this->jwt_token = val;
}

void Room_GetBaseInfo_SendInfo::__set_sendtime(const int32_t val) {
  this->sendtime = val;
}

void Room_GetBaseInfo_SendInfo::__set_Aim_Roomnum(const std::string& val) {
  this->Aim_Roomnum = val;
}

void Room_GetBaseInfo_SendInfo::__set_info(const std::string& val) {
  this->info = val;
}
std::ostream& operator<<(std::ostream& out, const Room_GetBaseInfo_SendInfo& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t Room_GetBaseInfo_SendInfo::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->type);
          this->__isset.type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->jwt_token);
          this->__isset.jwt_token = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->sendtime);
          this->__isset.sendtime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Aim_Roomnum);
          this->__isset.Aim_Roomnum = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->info);
          this->__isset.info = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Room_GetBaseInfo_SendInfo::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("Room_GetBaseInfo_SendInfo");

  xfer += oprot->writeFieldBegin("type", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->type);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("jwt_token", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->jwt_token);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("sendtime", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->sendtime);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Aim_Roomnum", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->Aim_Roomnum);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("info", ::apache::thrift::protocol::T_STRING, 5);
  xfer += oprot->writeString(this->info);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Room_GetBaseInfo_SendInfo &a, Room_GetBaseInfo_SendInfo &b) {
  using ::std::swap;
  swap(a.type, b.type);
  swap(a.jwt_token, b.jwt_token);
  swap(a.sendtime, b.sendtime);
  swap(a.Aim_Roomnum, b.Aim_Roomnum);
  swap(a.info, b.info);
  swap(a.__isset, b.__isset);
}

Room_GetBaseInfo_SendInfo::Room_GetBaseInfo_SendInfo(const Room_GetBaseInfo_SendInfo& other0) {
  type = other0.type;
  jwt_token = other0.jwt_token;
  sendtime = other0.sendtime;
  Aim_Roomnum = other0.Aim_Roomnum;
  info = other0.info;
  __isset = other0.__isset;
}
Room_GetBaseInfo_SendInfo& Room_GetBaseInfo_SendInfo::operator=(const Room_GetBaseInfo_SendInfo& other1) {
  type = other1.type;
  jwt_token = other1.jwt_token;
  sendtime = other1.sendtime;
  Aim_Roomnum = other1.Aim_Roomnum;
  info = other1.info;
  __isset = other1.__isset;
  return *this;
}
void Room_GetBaseInfo_SendInfo::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "Room_GetBaseInfo_SendInfo(";
  out << "type=" << to_string(type);
  out << ", " << "jwt_token=" << to_string(jwt_token);
  out << ", " << "sendtime=" << to_string(sendtime);
  out << ", " << "Aim_Roomnum=" << to_string(Aim_Roomnum);
  out << ", " << "info=" << to_string(info);
  out << ")";
}


Room_GetBaseInfo_RecvInfo::~Room_GetBaseInfo_RecvInfo() noexcept {
}


void Room_GetBaseInfo_RecvInfo::__set_type(const int32_t val) {
  this->type = val;
}

void Room_GetBaseInfo_RecvInfo::__set_sendtime(const int32_t val) {
  this->sendtime = val;
}

void Room_GetBaseInfo_RecvInfo::__set_status(const int32_t val) {
  this->status = val;
}

void Room_GetBaseInfo_RecvInfo::__set_info(const std::string& val) {
  this->info = val;
}
std::ostream& operator<<(std::ostream& out, const Room_GetBaseInfo_RecvInfo& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t Room_GetBaseInfo_RecvInfo::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->type);
          this->__isset.type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->sendtime);
          this->__isset.sendtime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->status);
          this->__isset.status = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->info);
          this->__isset.info = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Room_GetBaseInfo_RecvInfo::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("Room_GetBaseInfo_RecvInfo");

  xfer += oprot->writeFieldBegin("type", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->type);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("sendtime", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->sendtime);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("status", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->status);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("info", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->info);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Room_GetBaseInfo_RecvInfo &a, Room_GetBaseInfo_RecvInfo &b) {
  using ::std::swap;
  swap(a.type, b.type);
  swap(a.sendtime, b.sendtime);
  swap(a.status, b.status);
  swap(a.info, b.info);
  swap(a.__isset, b.__isset);
}

Room_GetBaseInfo_RecvInfo::Room_GetBaseInfo_RecvInfo(const Room_GetBaseInfo_RecvInfo& other2) {
  type = other2.type;
  sendtime = other2.sendtime;
  status = other2.status;
  info = other2.info;
  __isset = other2.__isset;
}
Room_GetBaseInfo_RecvInfo& Room_GetBaseInfo_RecvInfo::operator=(const Room_GetBaseInfo_RecvInfo& other3) {
  type = other3.type;
  sendtime = other3.sendtime;
  status = other3.status;
  info = other3.info;
  __isset = other3.__isset;
  return *this;
}
void Room_GetBaseInfo_RecvInfo::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "Room_GetBaseInfo_RecvInfo(";
  out << "type=" << to_string(type);
  out << ", " << "sendtime=" << to_string(sendtime);
  out << ", " << "status=" << to_string(status);
  out << ", " << "info=" << to_string(info);
  out << ")";
}


Room_GetExInfo_SendInfo::~Room_GetExInfo_SendInfo() noexcept {
}


void Room_GetExInfo_SendInfo::__set_type(const int32_t val) {
  this->type = val;
}

void Room_GetExInfo_SendInfo::__set_jwt_token(const std::string& val) {
  this->jwt_token = val;
}

void Room_GetExInfo_SendInfo::__set_sendtime(const int32_t val) {
  this->sendtime = val;
}

void Room_GetExInfo_SendInfo::__set_Aim_Roomnum(const std::string& val) {
  this->Aim_Roomnum = val;
}

void Room_GetExInfo_SendInfo::__set_info(const std::string& val) {
  this->info = val;
}
std::ostream& operator<<(std::ostream& out, const Room_GetExInfo_SendInfo& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t Room_GetExInfo_SendInfo::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->type);
          this->__isset.type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->jwt_token);
          this->__isset.jwt_token = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->sendtime);
          this->__isset.sendtime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Aim_Roomnum);
          this->__isset.Aim_Roomnum = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->info);
          this->__isset.info = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Room_GetExInfo_SendInfo::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("Room_GetExInfo_SendInfo");

  xfer += oprot->writeFieldBegin("type", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->type);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("jwt_token", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->jwt_token);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("sendtime", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->sendtime);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Aim_Roomnum", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->Aim_Roomnum);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("info", ::apache::thrift::protocol::T_STRING, 5);
  xfer += oprot->writeString(this->info);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Room_GetExInfo_SendInfo &a, Room_GetExInfo_SendInfo &b) {
  using ::std::swap;
  swap(a.type, b.type);
  swap(a.jwt_token, b.jwt_token);
  swap(a.sendtime, b.sendtime);
  swap(a.Aim_Roomnum, b.Aim_Roomnum);
  swap(a.info, b.info);
  swap(a.__isset, b.__isset);
}

Room_GetExInfo_SendInfo::Room_GetExInfo_SendInfo(const Room_GetExInfo_SendInfo& other4) {
  type = other4.type;
  jwt_token = other4.jwt_token;
  sendtime = other4.sendtime;
  Aim_Roomnum = other4.Aim_Roomnum;
  info = other4.info;
  __isset = other4.__isset;
}
Room_GetExInfo_SendInfo& Room_GetExInfo_SendInfo::operator=(const Room_GetExInfo_SendInfo& other5) {
  type = other5.type;
  jwt_token = other5.jwt_token;
  sendtime = other5.sendtime;
  Aim_Roomnum = other5.Aim_Roomnum;
  info = other5.info;
  __isset = other5.__isset;
  return *this;
}
void Room_GetExInfo_SendInfo::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "Room_GetExInfo_SendInfo(";
  out << "type=" << to_string(type);
  out << ", " << "jwt_token=" << to_string(jwt_token);
  out << ", " << "sendtime=" << to_string(sendtime);
  out << ", " << "Aim_Roomnum=" << to_string(Aim_Roomnum);
  out << ", " << "info=" << to_string(info);
  out << ")";
}


Room_GetExInfo_RecvInfo::~Room_GetExInfo_RecvInfo() noexcept {
}


void Room_GetExInfo_RecvInfo::__set_type(const int32_t val) {
  this->type = val;
}

void Room_GetExInfo_RecvInfo::__set_sendtime(const int32_t val) {
  this->sendtime = val;
}

void Room_GetExInfo_RecvInfo::__set_status(const int32_t val) {
  this->status = val;
}

void Room_GetExInfo_RecvInfo::__set_info(const std::string& val) {
  this->info = val;
}
std::ostream& operator<<(std::ostream& out, const Room_GetExInfo_RecvInfo& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t Room_GetExInfo_RecvInfo::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->type);
          this->__isset.type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->sendtime);
          this->__isset.sendtime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->status);
          this->__isset.status = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->info);
          this->__isset.info = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Room_GetExInfo_RecvInfo::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("Room_GetExInfo_RecvInfo");

  xfer += oprot->writeFieldBegin("type", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->type);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("sendtime", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->sendtime);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("status", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->status);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("info", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->info);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Room_GetExInfo_RecvInfo &a, Room_GetExInfo_RecvInfo &b) {
  using ::std::swap;
  swap(a.type, b.type);
  swap(a.sendtime, b.sendtime);
  swap(a.status, b.status);
  swap(a.info, b.info);
  swap(a.__isset, b.__isset);
}

Room_GetExInfo_RecvInfo::Room_GetExInfo_RecvInfo(const Room_GetExInfo_RecvInfo& other6) {
  type = other6.type;
  sendtime = other6.sendtime;
  status = other6.status;
  info = other6.info;
  __isset = other6.__isset;
}
Room_GetExInfo_RecvInfo& Room_GetExInfo_RecvInfo::operator=(const Room_GetExInfo_RecvInfo& other7) {
  type = other7.type;
  sendtime = other7.sendtime;
  status = other7.status;
  info = other7.info;
  __isset = other7.__isset;
  return *this;
}
void Room_GetExInfo_RecvInfo::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "Room_GetExInfo_RecvInfo(";
  out << "type=" << to_string(type);
  out << ", " << "sendtime=" << to_string(sendtime);
  out << ", " << "status=" << to_string(status);
  out << ", " << "info=" << to_string(info);
  out << ")";
}


Room_GetURrelation_SendInfo::~Room_GetURrelation_SendInfo() noexcept {
}


void Room_GetURrelation_SendInfo::__set_type(const int32_t val) {
  this->type = val;
}

void Room_GetURrelation_SendInfo::__set_jwt_token(const std::string& val) {
  this->jwt_token = val;
}

void Room_GetURrelation_SendInfo::__set_sendtime(const int32_t val) {
  this->sendtime = val;
}

void Room_GetURrelation_SendInfo::__set_Aim_Roomnum(const std::string& val) {
  this->Aim_Roomnum = val;
}

void Room_GetURrelation_SendInfo::__set_info(const std::string& val) {
  this->info = val;
}
std::ostream& operator<<(std::ostream& out, const Room_GetURrelation_SendInfo& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t Room_GetURrelation_SendInfo::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->type);
          this->__isset.type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->jwt_token);
          this->__isset.jwt_token = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->sendtime);
          this->__isset.sendtime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Aim_Roomnum);
          this->__isset.Aim_Roomnum = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->info);
          this->__isset.info = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Room_GetURrelation_SendInfo::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("Room_GetURrelation_SendInfo");

  xfer += oprot->writeFieldBegin("type", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->type);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("jwt_token", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->jwt_token);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("sendtime", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->sendtime);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Aim_Roomnum", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->Aim_Roomnum);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("info", ::apache::thrift::protocol::T_STRING, 5);
  xfer += oprot->writeString(this->info);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Room_GetURrelation_SendInfo &a, Room_GetURrelation_SendInfo &b) {
  using ::std::swap;
  swap(a.type, b.type);
  swap(a.jwt_token, b.jwt_token);
  swap(a.sendtime, b.sendtime);
  swap(a.Aim_Roomnum, b.Aim_Roomnum);
  swap(a.info, b.info);
  swap(a.__isset, b.__isset);
}

Room_GetURrelation_SendInfo::Room_GetURrelation_SendInfo(const Room_GetURrelation_SendInfo& other8) {
  type = other8.type;
  jwt_token = other8.jwt_token;
  sendtime = other8.sendtime;
  Aim_Roomnum = other8.Aim_Roomnum;
  info = other8.info;
  __isset = other8.__isset;
}
Room_GetURrelation_SendInfo& Room_GetURrelation_SendInfo::operator=(const Room_GetURrelation_SendInfo& other9) {
  type = other9.type;
  jwt_token = other9.jwt_token;
  sendtime = other9.sendtime;
  Aim_Roomnum = other9.Aim_Roomnum;
  info = other9.info;
  __isset = other9.__isset;
  return *this;
}
void Room_GetURrelation_SendInfo::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "Room_GetURrelation_SendInfo(";
  out << "type=" << to_string(type);
  out << ", " << "jwt_token=" << to_string(jwt_token);
  out << ", " << "sendtime=" << to_string(sendtime);
  out << ", " << "Aim_Roomnum=" << to_string(Aim_Roomnum);
  out << ", " << "info=" << to_string(info);
  out << ")";
}


Room_GetURrelation_RecvInfo::~Room_GetURrelation_RecvInfo() noexcept {
}


void Room_GetURrelation_RecvInfo::__set_type(const int32_t val) {
  this->type = val;
}

void Room_GetURrelation_RecvInfo::__set_sendtime(const int32_t val) {
  this->sendtime = val;
}

void Room_GetURrelation_RecvInfo::__set_status(const int32_t val) {
  this->status = val;
}

void Room_GetURrelation_RecvInfo::__set_info_UR_pos(const std::string& val) {
  this->info_UR_pos = val;
}

void Room_GetURrelation_RecvInfo::__set_info_UR_per(const std::string& val) {
  this->info_UR_per = val;
}
std::ostream& operator<<(std::ostream& out, const Room_GetURrelation_RecvInfo& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t Room_GetURrelation_RecvInfo::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->type);
          this->__isset.type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->sendtime);
          this->__isset.sendtime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->status);
          this->__isset.status = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->info_UR_pos);
          this->__isset.info_UR_pos = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->info_UR_per);
          this->__isset.info_UR_per = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Room_GetURrelation_RecvInfo::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("Room_GetURrelation_RecvInfo");

  xfer += oprot->writeFieldBegin("type", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->type);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("sendtime", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->sendtime);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("status", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->status);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("info_UR_pos", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->info_UR_pos);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("info_UR_per", ::apache::thrift::protocol::T_STRING, 5);
  xfer += oprot->writeString(this->info_UR_per);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Room_GetURrelation_RecvInfo &a, Room_GetURrelation_RecvInfo &b) {
  using ::std::swap;
  swap(a.type, b.type);
  swap(a.sendtime, b.sendtime);
  swap(a.status, b.status);
  swap(a.info_UR_pos, b.info_UR_pos);
  swap(a.info_UR_per, b.info_UR_per);
  swap(a.__isset, b.__isset);
}

Room_GetURrelation_RecvInfo::Room_GetURrelation_RecvInfo(const Room_GetURrelation_RecvInfo& other10) {
  type = other10.type;
  sendtime = other10.sendtime;
  status = other10.status;
  info_UR_pos = other10.info_UR_pos;
  info_UR_per = other10.info_UR_per;
  __isset = other10.__isset;
}
Room_GetURrelation_RecvInfo& Room_GetURrelation_RecvInfo::operator=(const Room_GetURrelation_RecvInfo& other11) {
  type = other11.type;
  sendtime = other11.sendtime;
  status = other11.status;
  info_UR_pos = other11.info_UR_pos;
  info_UR_per = other11.info_UR_per;
  __isset = other11.__isset;
  return *this;
}
void Room_GetURrelation_RecvInfo::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "Room_GetURrelation_RecvInfo(";
  out << "type=" << to_string(type);
  out << ", " << "sendtime=" << to_string(sendtime);
  out << ", " << "status=" << to_string(status);
  out << ", " << "info_UR_pos=" << to_string(info_UR_pos);
  out << ", " << "info_UR_per=" << to_string(info_UR_per);
  out << ")";
}


Room_Create_SendInfo::~Room_Create_SendInfo() noexcept {
}


void Room_Create_SendInfo::__set_type(const int32_t val) {
  this->type = val;
}

void Room_Create_SendInfo::__set_jwt_token(const std::string& val) {
  this->jwt_token = val;
}

void Room_Create_SendInfo::__set_sendtime(const int32_t val) {
  this->sendtime = val;
}

void Room_Create_SendInfo::__set_Roomnum(const std::string& val) {
  this->Roomnum = val;
}

void Room_Create_SendInfo::__set_Islocking(const int32_t val) {
  this->Islocking = val;
}

void Room_Create_SendInfo::__set_Roomname(const std::string& val) {
  this->Roomname = val;
}

void Room_Create_SendInfo::__set_passwd(const std::string& val) {
  this->passwd = val;
}

void Room_Create_SendInfo::__set_Debate_pos(const int32_t val) {
  this->Debate_pos = val;
}
std::ostream& operator<<(std::ostream& out, const Room_Create_SendInfo& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t Room_Create_SendInfo::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->type);
          this->__isset.type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->jwt_token);
          this->__isset.jwt_token = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->sendtime);
          this->__isset.sendtime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Roomnum);
          this->__isset.Roomnum = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->Islocking);
          this->__isset.Islocking = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Roomname);
          this->__isset.Roomname = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->passwd);
          this->__isset.passwd = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->Debate_pos);
          this->__isset.Debate_pos = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Room_Create_SendInfo::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("Room_Create_SendInfo");

  xfer += oprot->writeFieldBegin("type", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->type);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("jwt_token", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->jwt_token);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("sendtime", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->sendtime);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Roomnum", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->Roomnum);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Islocking", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32(this->Islocking);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Roomname", ::apache::thrift::protocol::T_STRING, 6);
  xfer += oprot->writeString(this->Roomname);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("passwd", ::apache::thrift::protocol::T_STRING, 7);
  xfer += oprot->writeString(this->passwd);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Debate_pos", ::apache::thrift::protocol::T_I32, 8);
  xfer += oprot->writeI32(this->Debate_pos);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Room_Create_SendInfo &a, Room_Create_SendInfo &b) {
  using ::std::swap;
  swap(a.type, b.type);
  swap(a.jwt_token, b.jwt_token);
  swap(a.sendtime, b.sendtime);
  swap(a.Roomnum, b.Roomnum);
  swap(a.Islocking, b.Islocking);
  swap(a.Roomname, b.Roomname);
  swap(a.passwd, b.passwd);
  swap(a.Debate_pos, b.Debate_pos);
  swap(a.__isset, b.__isset);
}

Room_Create_SendInfo::Room_Create_SendInfo(const Room_Create_SendInfo& other12) {
  type = other12.type;
  jwt_token = other12.jwt_token;
  sendtime = other12.sendtime;
  Roomnum = other12.Roomnum;
  Islocking = other12.Islocking;
  Roomname = other12.Roomname;
  passwd = other12.passwd;
  Debate_pos = other12.Debate_pos;
  __isset = other12.__isset;
}
Room_Create_SendInfo& Room_Create_SendInfo::operator=(const Room_Create_SendInfo& other13) {
  type = other13.type;
  jwt_token = other13.jwt_token;
  sendtime = other13.sendtime;
  Roomnum = other13.Roomnum;
  Islocking = other13.Islocking;
  Roomname = other13.Roomname;
  passwd = other13.passwd;
  Debate_pos = other13.Debate_pos;
  __isset = other13.__isset;
  return *this;
}
void Room_Create_SendInfo::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "Room_Create_SendInfo(";
  out << "type=" << to_string(type);
  out << ", " << "jwt_token=" << to_string(jwt_token);
  out << ", " << "sendtime=" << to_string(sendtime);
  out << ", " << "Roomnum=" << to_string(Roomnum);
  out << ", " << "Islocking=" << to_string(Islocking);
  out << ", " << "Roomname=" << to_string(Roomname);
  out << ", " << "passwd=" << to_string(passwd);
  out << ", " << "Debate_pos=" << to_string(Debate_pos);
  out << ")";
}


Room_Create_RecvInfo::~Room_Create_RecvInfo() noexcept {
}


void Room_Create_RecvInfo::__set_type(const int32_t val) {
  this->type = val;
}

void Room_Create_RecvInfo::__set_sendtime(const int32_t val) {
  this->sendtime = val;
}

void Room_Create_RecvInfo::__set_status(const int32_t val) {
  this->status = val;
}
std::ostream& operator<<(std::ostream& out, const Room_Create_RecvInfo& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t Room_Create_RecvInfo::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->type);
          this->__isset.type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->sendtime);
          this->__isset.sendtime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->status);
          this->__isset.status = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Room_Create_RecvInfo::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("Room_Create_RecvInfo");

  xfer += oprot->writeFieldBegin("type", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->type);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("sendtime", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->sendtime);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("status", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->status);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Room_Create_RecvInfo &a, Room_Create_RecvInfo &b) {
  using ::std::swap;
  swap(a.type, b.type);
  swap(a.sendtime, b.sendtime);
  swap(a.status, b.status);
  swap(a.__isset, b.__isset);
}

Room_Create_RecvInfo::Room_Create_RecvInfo(const Room_Create_RecvInfo& other14) noexcept {
  type = other14.type;
  sendtime = other14.sendtime;
  status = other14.status;
  __isset = other14.__isset;
}
Room_Create_RecvInfo& Room_Create_RecvInfo::operator=(const Room_Create_RecvInfo& other15) noexcept {
  type = other15.type;
  sendtime = other15.sendtime;
  status = other15.status;
  __isset = other15.__isset;
  return *this;
}
void Room_Create_RecvInfo::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "Room_Create_RecvInfo(";
  out << "type=" << to_string(type);
  out << ", " << "sendtime=" << to_string(sendtime);
  out << ", " << "status=" << to_string(status);
  out << ")";
}


Room_Joinroom_SendInfo::~Room_Joinroom_SendInfo() noexcept {
}


void Room_Joinroom_SendInfo::__set_type(const int32_t val) {
  this->type = val;
}

void Room_Joinroom_SendInfo::__set_jwt_token(const std::string& val) {
  this->jwt_token = val;
}

void Room_Joinroom_SendInfo::__set_sendtime(const int32_t val) {
  this->sendtime = val;
}

void Room_Joinroom_SendInfo::__set_roomnum(const std::string& val) {
  this->roomnum = val;
}

void Room_Joinroom_SendInfo::__set_Debate_pos(const int32_t val) {
  this->Debate_pos = val;
}

void Room_Joinroom_SendInfo::__set_passwd(const std::string& val) {
  this->passwd = val;
}
std::ostream& operator<<(std::ostream& out, const Room_Joinroom_SendInfo& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t Room_Joinroom_SendInfo::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->type);
          this->__isset.type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->jwt_token);
          this->__isset.jwt_token = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->sendtime);
          this->__isset.sendtime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->roomnum);
          this->__isset.roomnum = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->Debate_pos);
          this->__isset.Debate_pos = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->passwd);
          this->__isset.passwd = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Room_Joinroom_SendInfo::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("Room_Joinroom_SendInfo");

  xfer += oprot->writeFieldBegin("type", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->type);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("jwt_token", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->jwt_token);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("sendtime", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->sendtime);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("roomnum", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->roomnum);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Debate_pos", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32(this->Debate_pos);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("passwd", ::apache::thrift::protocol::T_STRING, 6);
  xfer += oprot->writeString(this->passwd);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Room_Joinroom_SendInfo &a, Room_Joinroom_SendInfo &b) {
  using ::std::swap;
  swap(a.type, b.type);
  swap(a.jwt_token, b.jwt_token);
  swap(a.sendtime, b.sendtime);
  swap(a.roomnum, b.roomnum);
  swap(a.Debate_pos, b.Debate_pos);
  swap(a.passwd, b.passwd);
  swap(a.__isset, b.__isset);
}

Room_Joinroom_SendInfo::Room_Joinroom_SendInfo(const Room_Joinroom_SendInfo& other16) {
  type = other16.type;
  jwt_token = other16.jwt_token;
  sendtime = other16.sendtime;
  roomnum = other16.roomnum;
  Debate_pos = other16.Debate_pos;
  passwd = other16.passwd;
  __isset = other16.__isset;
}
Room_Joinroom_SendInfo& Room_Joinroom_SendInfo::operator=(const Room_Joinroom_SendInfo& other17) {
  type = other17.type;
  jwt_token = other17.jwt_token;
  sendtime = other17.sendtime;
  roomnum = other17.roomnum;
  Debate_pos = other17.Debate_pos;
  passwd = other17.passwd;
  __isset = other17.__isset;
  return *this;
}
void Room_Joinroom_SendInfo::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "Room_Joinroom_SendInfo(";
  out << "type=" << to_string(type);
  out << ", " << "jwt_token=" << to_string(jwt_token);
  out << ", " << "sendtime=" << to_string(sendtime);
  out << ", " << "roomnum=" << to_string(roomnum);
  out << ", " << "Debate_pos=" << to_string(Debate_pos);
  out << ", " << "passwd=" << to_string(passwd);
  out << ")";
}


Room_Joinroom_RecvInfo::~Room_Joinroom_RecvInfo() noexcept {
}


void Room_Joinroom_RecvInfo::__set_type(const int32_t val) {
  this->type = val;
}

void Room_Joinroom_RecvInfo::__set_sendtime(const int32_t val) {
  this->sendtime = val;
}

void Room_Joinroom_RecvInfo::__set_status(const int32_t val) {
  this->status = val;
}
std::ostream& operator<<(std::ostream& out, const Room_Joinroom_RecvInfo& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t Room_Joinroom_RecvInfo::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->type);
          this->__isset.type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->sendtime);
          this->__isset.sendtime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->status);
          this->__isset.status = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Room_Joinroom_RecvInfo::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("Room_Joinroom_RecvInfo");

  xfer += oprot->writeFieldBegin("type", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->type);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("sendtime", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->sendtime);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("status", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->status);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Room_Joinroom_RecvInfo &a, Room_Joinroom_RecvInfo &b) {
  using ::std::swap;
  swap(a.type, b.type);
  swap(a.sendtime, b.sendtime);
  swap(a.status, b.status);
  swap(a.__isset, b.__isset);
}

Room_Joinroom_RecvInfo::Room_Joinroom_RecvInfo(const Room_Joinroom_RecvInfo& other18) noexcept {
  type = other18.type;
  sendtime = other18.sendtime;
  status = other18.status;
  __isset = other18.__isset;
}
Room_Joinroom_RecvInfo& Room_Joinroom_RecvInfo::operator=(const Room_Joinroom_RecvInfo& other19) noexcept {
  type = other19.type;
  sendtime = other19.sendtime;
  status = other19.status;
  __isset = other19.__isset;
  return *this;
}
void Room_Joinroom_RecvInfo::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "Room_Joinroom_RecvInfo(";
  out << "type=" << to_string(type);
  out << ", " << "sendtime=" << to_string(sendtime);
  out << ", " << "status=" << to_string(status);
  out << ")";
}


Room_Exitroom_SendInfo::~Room_Exitroom_SendInfo() noexcept {
}


void Room_Exitroom_SendInfo::__set_type(const int32_t val) {
  this->type = val;
}

void Room_Exitroom_SendInfo::__set_jwt_token(const std::string& val) {
  this->jwt_token = val;
}

void Room_Exitroom_SendInfo::__set_sendtime(const int32_t val) {
  this->sendtime = val;
}

void Room_Exitroom_SendInfo::__set_roomnum(const std::string& val) {
  this->roomnum = val;
}
std::ostream& operator<<(std::ostream& out, const Room_Exitroom_SendInfo& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t Room_Exitroom_SendInfo::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->type);
          this->__isset.type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->jwt_token);
          this->__isset.jwt_token = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->sendtime);
          this->__isset.sendtime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->roomnum);
          this->__isset.roomnum = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Room_Exitroom_SendInfo::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("Room_Exitroom_SendInfo");

  xfer += oprot->writeFieldBegin("type", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->type);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("jwt_token", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->jwt_token);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("sendtime", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->sendtime);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("roomnum", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->roomnum);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Room_Exitroom_SendInfo &a, Room_Exitroom_SendInfo &b) {
  using ::std::swap;
  swap(a.type, b.type);
  swap(a.jwt_token, b.jwt_token);
  swap(a.sendtime, b.sendtime);
  swap(a.roomnum, b.roomnum);
  swap(a.__isset, b.__isset);
}

Room_Exitroom_SendInfo::Room_Exitroom_SendInfo(const Room_Exitroom_SendInfo& other20) {
  type = other20.type;
  jwt_token = other20.jwt_token;
  sendtime = other20.sendtime;
  roomnum = other20.roomnum;
  __isset = other20.__isset;
}
Room_Exitroom_SendInfo& Room_Exitroom_SendInfo::operator=(const Room_Exitroom_SendInfo& other21) {
  type = other21.type;
  jwt_token = other21.jwt_token;
  sendtime = other21.sendtime;
  roomnum = other21.roomnum;
  __isset = other21.__isset;
  return *this;
}
void Room_Exitroom_SendInfo::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "Room_Exitroom_SendInfo(";
  out << "type=" << to_string(type);
  out << ", " << "jwt_token=" << to_string(jwt_token);
  out << ", " << "sendtime=" << to_string(sendtime);
  out << ", " << "roomnum=" << to_string(roomnum);
  out << ")";
}


Room_Exitroom_RecvInfo::~Room_Exitroom_RecvInfo() noexcept {
}


void Room_Exitroom_RecvInfo::__set_type(const int32_t val) {
  this->type = val;
}

void Room_Exitroom_RecvInfo::__set_sendtime(const int32_t val) {
  this->sendtime = val;
}

void Room_Exitroom_RecvInfo::__set_status(const int32_t val) {
  this->status = val;
}
std::ostream& operator<<(std::ostream& out, const Room_Exitroom_RecvInfo& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t Room_Exitroom_RecvInfo::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->type);
          this->__isset.type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->sendtime);
          this->__isset.sendtime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->status);
          this->__isset.status = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Room_Exitroom_RecvInfo::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("Room_Exitroom_RecvInfo");

  xfer += oprot->writeFieldBegin("type", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->type);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("sendtime", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->sendtime);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("status", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->status);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Room_Exitroom_RecvInfo &a, Room_Exitroom_RecvInfo &b) {
  using ::std::swap;
  swap(a.type, b.type);
  swap(a.sendtime, b.sendtime);
  swap(a.status, b.status);
  swap(a.__isset, b.__isset);
}

Room_Exitroom_RecvInfo::Room_Exitroom_RecvInfo(const Room_Exitroom_RecvInfo& other22) noexcept {
  type = other22.type;
  sendtime = other22.sendtime;
  status = other22.status;
  __isset = other22.__isset;
}
Room_Exitroom_RecvInfo& Room_Exitroom_RecvInfo::operator=(const Room_Exitroom_RecvInfo& other23) noexcept {
  type = other23.type;
  sendtime = other23.sendtime;
  status = other23.status;
  __isset = other23.__isset;
  return *this;
}
void Room_Exitroom_RecvInfo::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "Room_Exitroom_RecvInfo(";
  out << "type=" << to_string(type);
  out << ", " << "sendtime=" << to_string(sendtime);
  out << ", " << "status=" << to_string(status);
  out << ")";
}


Room_ChangePasswd_SendInfo::~Room_ChangePasswd_SendInfo() noexcept {
}


void Room_ChangePasswd_SendInfo::__set_type(const int32_t val) {
  this->type = val;
}

void Room_ChangePasswd_SendInfo::__set_jwt_token(const std::string& val) {
  this->jwt_token = val;
}

void Room_ChangePasswd_SendInfo::__set_sendtime(const int32_t val) {
  this->sendtime = val;
}

void Room_ChangePasswd_SendInfo::__set_roomnum(const std::string& val) {
  this->roomnum = val;
}

void Room_ChangePasswd_SendInfo::__set_Opasswd(const std::string& val) {
  this->Opasswd = val;
}

void Room_ChangePasswd_SendInfo::__set_Npasswd(const std::string& val) {
  this->Npasswd = val;
}
std::ostream& operator<<(std::ostream& out, const Room_ChangePasswd_SendInfo& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t Room_ChangePasswd_SendInfo::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->type);
          this->__isset.type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->jwt_token);
          this->__isset.jwt_token = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->sendtime);
          this->__isset.sendtime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->roomnum);
          this->__isset.roomnum = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Opasswd);
          this->__isset.Opasswd = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Npasswd);
          this->__isset.Npasswd = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Room_ChangePasswd_SendInfo::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("Room_ChangePasswd_SendInfo");

  xfer += oprot->writeFieldBegin("type", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->type);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("jwt_token", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->jwt_token);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("sendtime", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->sendtime);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("roomnum", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->roomnum);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Opasswd", ::apache::thrift::protocol::T_STRING, 5);
  xfer += oprot->writeString(this->Opasswd);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Npasswd", ::apache::thrift::protocol::T_STRING, 6);
  xfer += oprot->writeString(this->Npasswd);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Room_ChangePasswd_SendInfo &a, Room_ChangePasswd_SendInfo &b) {
  using ::std::swap;
  swap(a.type, b.type);
  swap(a.jwt_token, b.jwt_token);
  swap(a.sendtime, b.sendtime);
  swap(a.roomnum, b.roomnum);
  swap(a.Opasswd, b.Opasswd);
  swap(a.Npasswd, b.Npasswd);
  swap(a.__isset, b.__isset);
}

Room_ChangePasswd_SendInfo::Room_ChangePasswd_SendInfo(const Room_ChangePasswd_SendInfo& other24) {
  type = other24.type;
  jwt_token = other24.jwt_token;
  sendtime = other24.sendtime;
  roomnum = other24.roomnum;
  Opasswd = other24.Opasswd;
  Npasswd = other24.Npasswd;
  __isset = other24.__isset;
}
Room_ChangePasswd_SendInfo& Room_ChangePasswd_SendInfo::operator=(const Room_ChangePasswd_SendInfo& other25) {
  type = other25.type;
  jwt_token = other25.jwt_token;
  sendtime = other25.sendtime;
  roomnum = other25.roomnum;
  Opasswd = other25.Opasswd;
  Npasswd = other25.Npasswd;
  __isset = other25.__isset;
  return *this;
}
void Room_ChangePasswd_SendInfo::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "Room_ChangePasswd_SendInfo(";
  out << "type=" << to_string(type);
  out << ", " << "jwt_token=" << to_string(jwt_token);
  out << ", " << "sendtime=" << to_string(sendtime);
  out << ", " << "roomnum=" << to_string(roomnum);
  out << ", " << "Opasswd=" << to_string(Opasswd);
  out << ", " << "Npasswd=" << to_string(Npasswd);
  out << ")";
}


Room_ChangePasswd_RecvInfo::~Room_ChangePasswd_RecvInfo() noexcept {
}


void Room_ChangePasswd_RecvInfo::__set_type(const int32_t val) {
  this->type = val;
}

void Room_ChangePasswd_RecvInfo::__set_sendtime(const int32_t val) {
  this->sendtime = val;
}

void Room_ChangePasswd_RecvInfo::__set_status(const int32_t val) {
  this->status = val;
}
std::ostream& operator<<(std::ostream& out, const Room_ChangePasswd_RecvInfo& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t Room_ChangePasswd_RecvInfo::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->type);
          this->__isset.type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->sendtime);
          this->__isset.sendtime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->status);
          this->__isset.status = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Room_ChangePasswd_RecvInfo::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("Room_ChangePasswd_RecvInfo");

  xfer += oprot->writeFieldBegin("type", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->type);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("sendtime", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->sendtime);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("status", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->status);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Room_ChangePasswd_RecvInfo &a, Room_ChangePasswd_RecvInfo &b) {
  using ::std::swap;
  swap(a.type, b.type);
  swap(a.sendtime, b.sendtime);
  swap(a.status, b.status);
  swap(a.__isset, b.__isset);
}

Room_ChangePasswd_RecvInfo::Room_ChangePasswd_RecvInfo(const Room_ChangePasswd_RecvInfo& other26) noexcept {
  type = other26.type;
  sendtime = other26.sendtime;
  status = other26.status;
  __isset = other26.__isset;
}
Room_ChangePasswd_RecvInfo& Room_ChangePasswd_RecvInfo::operator=(const Room_ChangePasswd_RecvInfo& other27) noexcept {
  type = other27.type;
  sendtime = other27.sendtime;
  status = other27.status;
  __isset = other27.__isset;
  return *this;
}
void Room_ChangePasswd_RecvInfo::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "Room_ChangePasswd_RecvInfo(";
  out << "type=" << to_string(type);
  out << ", " << "sendtime=" << to_string(sendtime);
  out << ", " << "status=" << to_string(status);
  out << ")";
}


Room_ChangeExtraInfo_SendInfo::~Room_ChangeExtraInfo_SendInfo() noexcept {
}


void Room_ChangeExtraInfo_SendInfo::__set_type(const int32_t val) {
  this->type = val;
}

void Room_ChangeExtraInfo_SendInfo::__set_jwt_token(const std::string& val) {
  this->jwt_token = val;
}

void Room_ChangeExtraInfo_SendInfo::__set_sendtime(const int32_t val) {
  this->sendtime = val;
}

void Room_ChangeExtraInfo_SendInfo::__set_roomnum(const std::string& val) {
  this->roomnum = val;
}

void Room_ChangeExtraInfo_SendInfo::__set_info(const std::string& val) {
  this->info = val;
}
std::ostream& operator<<(std::ostream& out, const Room_ChangeExtraInfo_SendInfo& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t Room_ChangeExtraInfo_SendInfo::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->type);
          this->__isset.type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->jwt_token);
          this->__isset.jwt_token = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->sendtime);
          this->__isset.sendtime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->roomnum);
          this->__isset.roomnum = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->info);
          this->__isset.info = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Room_ChangeExtraInfo_SendInfo::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("Room_ChangeExtraInfo_SendInfo");

  xfer += oprot->writeFieldBegin("type", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->type);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("jwt_token", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->jwt_token);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("sendtime", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->sendtime);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("roomnum", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->roomnum);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("info", ::apache::thrift::protocol::T_STRING, 5);
  xfer += oprot->writeString(this->info);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Room_ChangeExtraInfo_SendInfo &a, Room_ChangeExtraInfo_SendInfo &b) {
  using ::std::swap;
  swap(a.type, b.type);
  swap(a.jwt_token, b.jwt_token);
  swap(a.sendtime, b.sendtime);
  swap(a.roomnum, b.roomnum);
  swap(a.info, b.info);
  swap(a.__isset, b.__isset);
}

Room_ChangeExtraInfo_SendInfo::Room_ChangeExtraInfo_SendInfo(const Room_ChangeExtraInfo_SendInfo& other28) {
  type = other28.type;
  jwt_token = other28.jwt_token;
  sendtime = other28.sendtime;
  roomnum = other28.roomnum;
  info = other28.info;
  __isset = other28.__isset;
}
Room_ChangeExtraInfo_SendInfo& Room_ChangeExtraInfo_SendInfo::operator=(const Room_ChangeExtraInfo_SendInfo& other29) {
  type = other29.type;
  jwt_token = other29.jwt_token;
  sendtime = other29.sendtime;
  roomnum = other29.roomnum;
  info = other29.info;
  __isset = other29.__isset;
  return *this;
}
void Room_ChangeExtraInfo_SendInfo::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "Room_ChangeExtraInfo_SendInfo(";
  out << "type=" << to_string(type);
  out << ", " << "jwt_token=" << to_string(jwt_token);
  out << ", " << "sendtime=" << to_string(sendtime);
  out << ", " << "roomnum=" << to_string(roomnum);
  out << ", " << "info=" << to_string(info);
  out << ")";
}


Room_ChangeExtraInfo_RecvInfo::~Room_ChangeExtraInfo_RecvInfo() noexcept {
}


void Room_ChangeExtraInfo_RecvInfo::__set_type(const int32_t val) {
  this->type = val;
}

void Room_ChangeExtraInfo_RecvInfo::__set_sendtime(const int32_t val) {
  this->sendtime = val;
}

void Room_ChangeExtraInfo_RecvInfo::__set_status(const int32_t val) {
  this->status = val;
}
std::ostream& operator<<(std::ostream& out, const Room_ChangeExtraInfo_RecvInfo& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t Room_ChangeExtraInfo_RecvInfo::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->type);
          this->__isset.type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->sendtime);
          this->__isset.sendtime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->status);
          this->__isset.status = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Room_ChangeExtraInfo_RecvInfo::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("Room_ChangeExtraInfo_RecvInfo");

  xfer += oprot->writeFieldBegin("type", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->type);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("sendtime", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->sendtime);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("status", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->status);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Room_ChangeExtraInfo_RecvInfo &a, Room_ChangeExtraInfo_RecvInfo &b) {
  using ::std::swap;
  swap(a.type, b.type);
  swap(a.sendtime, b.sendtime);
  swap(a.status, b.status);
  swap(a.__isset, b.__isset);
}

Room_ChangeExtraInfo_RecvInfo::Room_ChangeExtraInfo_RecvInfo(const Room_ChangeExtraInfo_RecvInfo& other30) noexcept {
  type = other30.type;
  sendtime = other30.sendtime;
  status = other30.status;
  __isset = other30.__isset;
}
Room_ChangeExtraInfo_RecvInfo& Room_ChangeExtraInfo_RecvInfo::operator=(const Room_ChangeExtraInfo_RecvInfo& other31) noexcept {
  type = other31.type;
  sendtime = other31.sendtime;
  status = other31.status;
  __isset = other31.__isset;
  return *this;
}
void Room_ChangeExtraInfo_RecvInfo::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "Room_ChangeExtraInfo_RecvInfo(";
  out << "type=" << to_string(type);
  out << ", " << "sendtime=" << to_string(sendtime);
  out << ", " << "status=" << to_string(status);
  out << ")";
}


Room_ChangeDebatePos_SendInfo::~Room_ChangeDebatePos_SendInfo() noexcept {
}


void Room_ChangeDebatePos_SendInfo::__set_type(const int32_t val) {
  this->type = val;
}

void Room_ChangeDebatePos_SendInfo::__set_jwt_token(const std::string& val) {
  this->jwt_token = val;
}

void Room_ChangeDebatePos_SendInfo::__set_sendtime(const int32_t val) {
  this->sendtime = val;
}

void Room_ChangeDebatePos_SendInfo::__set_Debate_pos(const int32_t val) {
  this->Debate_pos = val;
}
std::ostream& operator<<(std::ostream& out, const Room_ChangeDebatePos_SendInfo& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t Room_ChangeDebatePos_SendInfo::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->type);
          this->__isset.type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->jwt_token);
          this->__isset.jwt_token = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->sendtime);
          this->__isset.sendtime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->Debate_pos);
          this->__isset.Debate_pos = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Room_ChangeDebatePos_SendInfo::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("Room_ChangeDebatePos_SendInfo");

  xfer += oprot->writeFieldBegin("type", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->type);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("jwt_token", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->jwt_token);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("sendtime", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->sendtime);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Debate_pos", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->Debate_pos);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Room_ChangeDebatePos_SendInfo &a, Room_ChangeDebatePos_SendInfo &b) {
  using ::std::swap;
  swap(a.type, b.type);
  swap(a.jwt_token, b.jwt_token);
  swap(a.sendtime, b.sendtime);
  swap(a.Debate_pos, b.Debate_pos);
  swap(a.__isset, b.__isset);
}

Room_ChangeDebatePos_SendInfo::Room_ChangeDebatePos_SendInfo(const Room_ChangeDebatePos_SendInfo& other32) {
  type = other32.type;
  jwt_token = other32.jwt_token;
  sendtime = other32.sendtime;
  Debate_pos = other32.Debate_pos;
  __isset = other32.__isset;
}
Room_ChangeDebatePos_SendInfo& Room_ChangeDebatePos_SendInfo::operator=(const Room_ChangeDebatePos_SendInfo& other33) {
  type = other33.type;
  jwt_token = other33.jwt_token;
  sendtime = other33.sendtime;
  Debate_pos = other33.Debate_pos;
  __isset = other33.__isset;
  return *this;
}
void Room_ChangeDebatePos_SendInfo::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "Room_ChangeDebatePos_SendInfo(";
  out << "type=" << to_string(type);
  out << ", " << "jwt_token=" << to_string(jwt_token);
  out << ", " << "sendtime=" << to_string(sendtime);
  out << ", " << "Debate_pos=" << to_string(Debate_pos);
  out << ")";
}


Room_ChangeDebatePos_RecvInfo::~Room_ChangeDebatePos_RecvInfo() noexcept {
}


void Room_ChangeDebatePos_RecvInfo::__set_type(const int32_t val) {
  this->type = val;
}

void Room_ChangeDebatePos_RecvInfo::__set_sendtime(const int32_t val) {
  this->sendtime = val;
}

void Room_ChangeDebatePos_RecvInfo::__set_status(const int32_t val) {
  this->status = val;
}
std::ostream& operator<<(std::ostream& out, const Room_ChangeDebatePos_RecvInfo& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t Room_ChangeDebatePos_RecvInfo::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->type);
          this->__isset.type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->sendtime);
          this->__isset.sendtime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->status);
          this->__isset.status = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Room_ChangeDebatePos_RecvInfo::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("Room_ChangeDebatePos_RecvInfo");

  xfer += oprot->writeFieldBegin("type", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->type);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("sendtime", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->sendtime);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("status", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->status);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Room_ChangeDebatePos_RecvInfo &a, Room_ChangeDebatePos_RecvInfo &b) {
  using ::std::swap;
  swap(a.type, b.type);
  swap(a.sendtime, b.sendtime);
  swap(a.status, b.status);
  swap(a.__isset, b.__isset);
}

Room_ChangeDebatePos_RecvInfo::Room_ChangeDebatePos_RecvInfo(const Room_ChangeDebatePos_RecvInfo& other34) noexcept {
  type = other34.type;
  sendtime = other34.sendtime;
  status = other34.status;
  __isset = other34.__isset;
}
Room_ChangeDebatePos_RecvInfo& Room_ChangeDebatePos_RecvInfo::operator=(const Room_ChangeDebatePos_RecvInfo& other35) noexcept {
  type = other35.type;
  sendtime = other35.sendtime;
  status = other35.status;
  __isset = other35.__isset;
  return *this;
}
void Room_ChangeDebatePos_RecvInfo::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "Room_ChangeDebatePos_RecvInfo(";
  out << "type=" << to_string(type);
  out << ", " << "sendtime=" << to_string(sendtime);
  out << ", " << "status=" << to_string(status);
  out << ")";
}


