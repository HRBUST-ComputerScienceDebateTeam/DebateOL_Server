// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

#include "Room.h"
#include "../../conf.hh"
#include "../dal/dal_room.h"
#include "../dal/dal_roomconfig.h"
#include "../../../pkg/JsonChange/jsonchange.h"
#include "../../../pkg/JWT/jwt.h"
#include "../../../pkg/Openssl/openssl.h"
#include <thrift/protocol/TBinaryProtocol.h>
#include <thrift/server/TSimpleServer.h>
#include <thrift/transport/TServerSocket.h>
#include <thrift/transport/TBufferTransports.h>

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;

class RoomHandler : virtual public RoomIf {
 public:
  RoomHandler() {
    // Your initialization goes here
    //初始化mysql

    DB_MYSQL_OFROOM::DB_mysql.DB_init(Room_host, Room_user, Room_passwd, Room_db, Room_port);  
    if(DB_MYSQL_OFROOM::DB_mysql.isinit()){
      if(DB_MYSQL_OFROOM::init_title() == false){
        cout << "[x]Room服务没有开启 - title初始化有误 " << endl;
      }else{
        cout << "[*]Room服务开启"<<endl;
      }
    }else{
      cout << "[x]Room服务没有开启 - 数据库连接出现问题 " << endl;
    }
  }

  void Room_ChangeDebatePos(Room_ChangeDebatePos_RecvInfo& _return, const Room_ChangeDebatePos_SendInfo& info) {
    // Your implementation goes here
    printf("Room_ChangeDebatePos\n");
  }

  void Room_ChangeExtraInfo(Room_ChangeExtraInfo_RecvInfo& _return, const Room_ChangeExtraInfo_SendInfo& info) {
    // Your implementation goes here
    printf("Room_ChangeExtraInfo\n");
  }

  void Room_ChangePasswd(Room_ChangePasswd_RecvInfo& _return, const Room_ChangePasswd_SendInfo& info) {
    // Your implementation goes here
    printf("Room_ChangePasswd\n");
  }

  void Room_Exitroom(Room_Exitroom_RecvInfo& _return, const Room_Exitroom_SendInfo& info) {
    // Your implementation goes here
    printf("Room_Exitroom\n");
  }

  void Room_Joinroom(Room_Joinroom_RecvInfo& _return, const Room_Joinroom_SendInfo& info) {
    // Your implementation goes here
    printf("Room_Joinroom\n");
  }

  void Room_Create(Room_Create_RecvInfo& _return, const Room_Create_SendInfo& info) {
    // Your implementation goes here
    printf("Room_Create\n");
  }

  void Room_GetURrelation(Room_GetURrelation_RecvInfo& _return, const Room_GetURrelation_SendInfo& info) {
    // Your implementation goes here
    printf("Room_GetURrelation\n");
  }

  void Room_GetExInfo(Room_GetExInfo_RecvInfo& _return, const Room_GetExInfo_SendInfo& info) {
    // Your implementation goes here
    printf("Room_GetExInfo\n");
  }

  void Room_GetBaseInfo(Room_GetBaseInfo_RecvInfo& _return, const Room_GetBaseInfo_SendInfo& info) {
    // Your implementation goes here
    printf("Room_GetBaseInfo\n");
  }

};

int main(int argc, char **argv) {
  int port = ROOM_PORT;
  ::std::shared_ptr<RoomHandler> handler(new RoomHandler());
  ::std::shared_ptr<TProcessor> processor(new RoomProcessor(handler));
  ::std::shared_ptr<TServerTransport> serverTransport(new TServerSocket(port));
  ::std::shared_ptr<TTransportFactory> transportFactory(new TBufferedTransportFactory());
  ::std::shared_ptr<TProtocolFactory> protocolFactory(new TBinaryProtocolFactory());

  TSimpleServer server(processor, serverTransport, transportFactory, protocolFactory);
  server.serve();
  return 0;
}

