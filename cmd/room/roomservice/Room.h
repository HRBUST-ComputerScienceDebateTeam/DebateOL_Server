/**
 * Autogenerated by Thrift Compiler (0.19.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef Room_H
#define Room_H

#include "room_types.h"
#include <memory>
#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>

#ifdef _MSC_VER
#pragma warning( push )
#pragma warning( disable : 4250 )  // inheriting methods via dominance
#endif

class RoomIf {
public:
    virtual ~RoomIf() {}
    virtual void Room_ChangeDebatePos( Room_ChangeDebatePos_RecvInfo& _return, const Room_ChangeDebatePos_SendInfo& info ) = 0;
    virtual void Room_ChangeExtraInfo( Room_ChangeExtraInfo_RecvInfo& _return, const Room_ChangeExtraInfo_SendInfo& info ) = 0;
    virtual void Room_ChangePasswd( Room_ChangePasswd_RecvInfo& _return, const Room_ChangePasswd_SendInfo& info )          = 0;
    virtual void Room_Exitroom( Room_Exitroom_RecvInfo& _return, const Room_Exitroom_SendInfo& info )                      = 0;
    virtual void Room_Joinroom( Room_Joinroom_RecvInfo& _return, const Room_Joinroom_SendInfo& info )                      = 0;
    virtual void Room_Create( Room_Create_RecvInfo& _return, const Room_Create_SendInfo& info )                            = 0;
    virtual void Room_GetURrelation( Room_GetURrelation_RecvInfo& _return, const Room_GetURrelation_SendInfo& info )       = 0;
    virtual void Room_GetExInfo( Room_GetExInfo_RecvInfo& _return, const Room_GetExInfo_SendInfo& info )                   = 0;
    virtual void Room_GetBaseInfo( Room_GetBaseInfo_RecvInfo& _return, const Room_GetBaseInfo_SendInfo& info )             = 0;
};

class RoomIfFactory {
public:
    typedef RoomIf Handler;

    virtual ~RoomIfFactory() {}

    virtual RoomIf* getHandler( const ::apache::thrift::TConnectionInfo& connInfo ) = 0;
    virtual void    releaseHandler( RoomIf* /* handler */ )                         = 0;
};

class RoomIfSingletonFactory : virtual public RoomIfFactory {
public:
    RoomIfSingletonFactory( const ::std::shared_ptr< RoomIf >& iface ) : iface_( iface ) {}
    virtual ~RoomIfSingletonFactory() {}

    virtual RoomIf* getHandler( const ::apache::thrift::TConnectionInfo& ) override {
        return iface_.get();
    }
    virtual void releaseHandler( RoomIf* /* handler */ ) override {}

protected:
    ::std::shared_ptr< RoomIf > iface_;
};

class RoomNull : virtual public RoomIf {
public:
    virtual ~RoomNull() {}
    void Room_ChangeDebatePos( Room_ChangeDebatePos_RecvInfo& /* _return */, const Room_ChangeDebatePos_SendInfo& /* info */ ) override {
        return;
    }
    void Room_ChangeExtraInfo( Room_ChangeExtraInfo_RecvInfo& /* _return */, const Room_ChangeExtraInfo_SendInfo& /* info */ ) override {
        return;
    }
    void Room_ChangePasswd( Room_ChangePasswd_RecvInfo& /* _return */, const Room_ChangePasswd_SendInfo& /* info */ ) override {
        return;
    }
    void Room_Exitroom( Room_Exitroom_RecvInfo& /* _return */, const Room_Exitroom_SendInfo& /* info */ ) override {
        return;
    }
    void Room_Joinroom( Room_Joinroom_RecvInfo& /* _return */, const Room_Joinroom_SendInfo& /* info */ ) override {
        return;
    }
    void Room_Create( Room_Create_RecvInfo& /* _return */, const Room_Create_SendInfo& /* info */ ) override {
        return;
    }
    void Room_GetURrelation( Room_GetURrelation_RecvInfo& /* _return */, const Room_GetURrelation_SendInfo& /* info */ ) override {
        return;
    }
    void Room_GetExInfo( Room_GetExInfo_RecvInfo& /* _return */, const Room_GetExInfo_SendInfo& /* info */ ) override {
        return;
    }
    void Room_GetBaseInfo( Room_GetBaseInfo_RecvInfo& /* _return */, const Room_GetBaseInfo_SendInfo& /* info */ ) override {
        return;
    }
};

typedef struct _Room_Room_ChangeDebatePos_args__isset {
    _Room_Room_ChangeDebatePos_args__isset() : info( false ) {}
    bool info : 1;
} _Room_Room_ChangeDebatePos_args__isset;

class Room_Room_ChangeDebatePos_args {
public:
    Room_Room_ChangeDebatePos_args( const Room_Room_ChangeDebatePos_args& );
    Room_Room_ChangeDebatePos_args& operator=( const Room_Room_ChangeDebatePos_args& );
    Room_Room_ChangeDebatePos_args() noexcept {}

    virtual ~Room_Room_ChangeDebatePos_args() noexcept;
    Room_ChangeDebatePos_SendInfo info;

    _Room_Room_ChangeDebatePos_args__isset __isset;

    void __set_info( const Room_ChangeDebatePos_SendInfo& val );

    bool operator==( const Room_Room_ChangeDebatePos_args& rhs ) const {
        if ( !( info == rhs.info ) )
            return false;
        return true;
    }
    bool operator!=( const Room_Room_ChangeDebatePos_args& rhs ) const {
        return !( *this == rhs );
    }

    bool operator<( const Room_Room_ChangeDebatePos_args& ) const;

    uint32_t read( ::apache::thrift::protocol::TProtocol* iprot );
    uint32_t write( ::apache::thrift::protocol::TProtocol* oprot ) const;
};

class Room_Room_ChangeDebatePos_pargs {
public:
    virtual ~Room_Room_ChangeDebatePos_pargs() noexcept;
    const Room_ChangeDebatePos_SendInfo* info;

    uint32_t write( ::apache::thrift::protocol::TProtocol* oprot ) const;
};

typedef struct _Room_Room_ChangeDebatePos_result__isset {
    _Room_Room_ChangeDebatePos_result__isset() : success( false ) {}
    bool success : 1;
} _Room_Room_ChangeDebatePos_result__isset;

class Room_Room_ChangeDebatePos_result {
public:
    Room_Room_ChangeDebatePos_result( const Room_Room_ChangeDebatePos_result& );
    Room_Room_ChangeDebatePos_result& operator=( const Room_Room_ChangeDebatePos_result& );
    Room_Room_ChangeDebatePos_result() noexcept {}

    virtual ~Room_Room_ChangeDebatePos_result() noexcept;
    Room_ChangeDebatePos_RecvInfo success;

    _Room_Room_ChangeDebatePos_result__isset __isset;

    void __set_success( const Room_ChangeDebatePos_RecvInfo& val );

    bool operator==( const Room_Room_ChangeDebatePos_result& rhs ) const {
        if ( !( success == rhs.success ) )
            return false;
        return true;
    }
    bool operator!=( const Room_Room_ChangeDebatePos_result& rhs ) const {
        return !( *this == rhs );
    }

    bool operator<( const Room_Room_ChangeDebatePos_result& ) const;

    uint32_t read( ::apache::thrift::protocol::TProtocol* iprot );
    uint32_t write( ::apache::thrift::protocol::TProtocol* oprot ) const;
};

typedef struct _Room_Room_ChangeDebatePos_presult__isset {
    _Room_Room_ChangeDebatePos_presult__isset() : success( false ) {}
    bool success : 1;
} _Room_Room_ChangeDebatePos_presult__isset;

class Room_Room_ChangeDebatePos_presult {
public:
    virtual ~Room_Room_ChangeDebatePos_presult() noexcept;
    Room_ChangeDebatePos_RecvInfo* success;

    _Room_Room_ChangeDebatePos_presult__isset __isset;

    uint32_t read( ::apache::thrift::protocol::TProtocol* iprot );
};

typedef struct _Room_Room_ChangeExtraInfo_args__isset {
    _Room_Room_ChangeExtraInfo_args__isset() : info( false ) {}
    bool info : 1;
} _Room_Room_ChangeExtraInfo_args__isset;

class Room_Room_ChangeExtraInfo_args {
public:
    Room_Room_ChangeExtraInfo_args( const Room_Room_ChangeExtraInfo_args& );
    Room_Room_ChangeExtraInfo_args& operator=( const Room_Room_ChangeExtraInfo_args& );
    Room_Room_ChangeExtraInfo_args() noexcept {}

    virtual ~Room_Room_ChangeExtraInfo_args() noexcept;
    Room_ChangeExtraInfo_SendInfo info;

    _Room_Room_ChangeExtraInfo_args__isset __isset;

    void __set_info( const Room_ChangeExtraInfo_SendInfo& val );

    bool operator==( const Room_Room_ChangeExtraInfo_args& rhs ) const {
        if ( !( info == rhs.info ) )
            return false;
        return true;
    }
    bool operator!=( const Room_Room_ChangeExtraInfo_args& rhs ) const {
        return !( *this == rhs );
    }

    bool operator<( const Room_Room_ChangeExtraInfo_args& ) const;

    uint32_t read( ::apache::thrift::protocol::TProtocol* iprot );
    uint32_t write( ::apache::thrift::protocol::TProtocol* oprot ) const;
};

class Room_Room_ChangeExtraInfo_pargs {
public:
    virtual ~Room_Room_ChangeExtraInfo_pargs() noexcept;
    const Room_ChangeExtraInfo_SendInfo* info;

    uint32_t write( ::apache::thrift::protocol::TProtocol* oprot ) const;
};

typedef struct _Room_Room_ChangeExtraInfo_result__isset {
    _Room_Room_ChangeExtraInfo_result__isset() : success( false ) {}
    bool success : 1;
} _Room_Room_ChangeExtraInfo_result__isset;

class Room_Room_ChangeExtraInfo_result {
public:
    Room_Room_ChangeExtraInfo_result( const Room_Room_ChangeExtraInfo_result& );
    Room_Room_ChangeExtraInfo_result& operator=( const Room_Room_ChangeExtraInfo_result& );
    Room_Room_ChangeExtraInfo_result() noexcept {}

    virtual ~Room_Room_ChangeExtraInfo_result() noexcept;
    Room_ChangeExtraInfo_RecvInfo success;

    _Room_Room_ChangeExtraInfo_result__isset __isset;

    void __set_success( const Room_ChangeExtraInfo_RecvInfo& val );

    bool operator==( const Room_Room_ChangeExtraInfo_result& rhs ) const {
        if ( !( success == rhs.success ) )
            return false;
        return true;
    }
    bool operator!=( const Room_Room_ChangeExtraInfo_result& rhs ) const {
        return !( *this == rhs );
    }

    bool operator<( const Room_Room_ChangeExtraInfo_result& ) const;

    uint32_t read( ::apache::thrift::protocol::TProtocol* iprot );
    uint32_t write( ::apache::thrift::protocol::TProtocol* oprot ) const;
};

typedef struct _Room_Room_ChangeExtraInfo_presult__isset {
    _Room_Room_ChangeExtraInfo_presult__isset() : success( false ) {}
    bool success : 1;
} _Room_Room_ChangeExtraInfo_presult__isset;

class Room_Room_ChangeExtraInfo_presult {
public:
    virtual ~Room_Room_ChangeExtraInfo_presult() noexcept;
    Room_ChangeExtraInfo_RecvInfo* success;

    _Room_Room_ChangeExtraInfo_presult__isset __isset;

    uint32_t read( ::apache::thrift::protocol::TProtocol* iprot );
};

typedef struct _Room_Room_ChangePasswd_args__isset {
    _Room_Room_ChangePasswd_args__isset() : info( false ) {}
    bool info : 1;
} _Room_Room_ChangePasswd_args__isset;

class Room_Room_ChangePasswd_args {
public:
    Room_Room_ChangePasswd_args( const Room_Room_ChangePasswd_args& );
    Room_Room_ChangePasswd_args& operator=( const Room_Room_ChangePasswd_args& );
    Room_Room_ChangePasswd_args() noexcept {}

    virtual ~Room_Room_ChangePasswd_args() noexcept;
    Room_ChangePasswd_SendInfo info;

    _Room_Room_ChangePasswd_args__isset __isset;

    void __set_info( const Room_ChangePasswd_SendInfo& val );

    bool operator==( const Room_Room_ChangePasswd_args& rhs ) const {
        if ( !( info == rhs.info ) )
            return false;
        return true;
    }
    bool operator!=( const Room_Room_ChangePasswd_args& rhs ) const {
        return !( *this == rhs );
    }

    bool operator<( const Room_Room_ChangePasswd_args& ) const;

    uint32_t read( ::apache::thrift::protocol::TProtocol* iprot );
    uint32_t write( ::apache::thrift::protocol::TProtocol* oprot ) const;
};

class Room_Room_ChangePasswd_pargs {
public:
    virtual ~Room_Room_ChangePasswd_pargs() noexcept;
    const Room_ChangePasswd_SendInfo* info;

    uint32_t write( ::apache::thrift::protocol::TProtocol* oprot ) const;
};

typedef struct _Room_Room_ChangePasswd_result__isset {
    _Room_Room_ChangePasswd_result__isset() : success( false ) {}
    bool success : 1;
} _Room_Room_ChangePasswd_result__isset;

class Room_Room_ChangePasswd_result {
public:
    Room_Room_ChangePasswd_result( const Room_Room_ChangePasswd_result& );
    Room_Room_ChangePasswd_result& operator=( const Room_Room_ChangePasswd_result& );
    Room_Room_ChangePasswd_result() noexcept {}

    virtual ~Room_Room_ChangePasswd_result() noexcept;
    Room_ChangePasswd_RecvInfo success;

    _Room_Room_ChangePasswd_result__isset __isset;

    void __set_success( const Room_ChangePasswd_RecvInfo& val );

    bool operator==( const Room_Room_ChangePasswd_result& rhs ) const {
        if ( !( success == rhs.success ) )
            return false;
        return true;
    }
    bool operator!=( const Room_Room_ChangePasswd_result& rhs ) const {
        return !( *this == rhs );
    }

    bool operator<( const Room_Room_ChangePasswd_result& ) const;

    uint32_t read( ::apache::thrift::protocol::TProtocol* iprot );
    uint32_t write( ::apache::thrift::protocol::TProtocol* oprot ) const;
};

typedef struct _Room_Room_ChangePasswd_presult__isset {
    _Room_Room_ChangePasswd_presult__isset() : success( false ) {}
    bool success : 1;
} _Room_Room_ChangePasswd_presult__isset;

class Room_Room_ChangePasswd_presult {
public:
    virtual ~Room_Room_ChangePasswd_presult() noexcept;
    Room_ChangePasswd_RecvInfo* success;

    _Room_Room_ChangePasswd_presult__isset __isset;

    uint32_t read( ::apache::thrift::protocol::TProtocol* iprot );
};

typedef struct _Room_Room_Exitroom_args__isset {
    _Room_Room_Exitroom_args__isset() : info( false ) {}
    bool info : 1;
} _Room_Room_Exitroom_args__isset;

class Room_Room_Exitroom_args {
public:
    Room_Room_Exitroom_args( const Room_Room_Exitroom_args& );
    Room_Room_Exitroom_args& operator=( const Room_Room_Exitroom_args& );
    Room_Room_Exitroom_args() noexcept {}

    virtual ~Room_Room_Exitroom_args() noexcept;
    Room_Exitroom_SendInfo info;

    _Room_Room_Exitroom_args__isset __isset;

    void __set_info( const Room_Exitroom_SendInfo& val );

    bool operator==( const Room_Room_Exitroom_args& rhs ) const {
        if ( !( info == rhs.info ) )
            return false;
        return true;
    }
    bool operator!=( const Room_Room_Exitroom_args& rhs ) const {
        return !( *this == rhs );
    }

    bool operator<( const Room_Room_Exitroom_args& ) const;

    uint32_t read( ::apache::thrift::protocol::TProtocol* iprot );
    uint32_t write( ::apache::thrift::protocol::TProtocol* oprot ) const;
};

class Room_Room_Exitroom_pargs {
public:
    virtual ~Room_Room_Exitroom_pargs() noexcept;
    const Room_Exitroom_SendInfo* info;

    uint32_t write( ::apache::thrift::protocol::TProtocol* oprot ) const;
};

typedef struct _Room_Room_Exitroom_result__isset {
    _Room_Room_Exitroom_result__isset() : success( false ) {}
    bool success : 1;
} _Room_Room_Exitroom_result__isset;

class Room_Room_Exitroom_result {
public:
    Room_Room_Exitroom_result( const Room_Room_Exitroom_result& );
    Room_Room_Exitroom_result& operator=( const Room_Room_Exitroom_result& );
    Room_Room_Exitroom_result() noexcept {}

    virtual ~Room_Room_Exitroom_result() noexcept;
    Room_Exitroom_RecvInfo success;

    _Room_Room_Exitroom_result__isset __isset;

    void __set_success( const Room_Exitroom_RecvInfo& val );

    bool operator==( const Room_Room_Exitroom_result& rhs ) const {
        if ( !( success == rhs.success ) )
            return false;
        return true;
    }
    bool operator!=( const Room_Room_Exitroom_result& rhs ) const {
        return !( *this == rhs );
    }

    bool operator<( const Room_Room_Exitroom_result& ) const;

    uint32_t read( ::apache::thrift::protocol::TProtocol* iprot );
    uint32_t write( ::apache::thrift::protocol::TProtocol* oprot ) const;
};

typedef struct _Room_Room_Exitroom_presult__isset {
    _Room_Room_Exitroom_presult__isset() : success( false ) {}
    bool success : 1;
} _Room_Room_Exitroom_presult__isset;

class Room_Room_Exitroom_presult {
public:
    virtual ~Room_Room_Exitroom_presult() noexcept;
    Room_Exitroom_RecvInfo* success;

    _Room_Room_Exitroom_presult__isset __isset;

    uint32_t read( ::apache::thrift::protocol::TProtocol* iprot );
};

typedef struct _Room_Room_Joinroom_args__isset {
    _Room_Room_Joinroom_args__isset() : info( false ) {}
    bool info : 1;
} _Room_Room_Joinroom_args__isset;

class Room_Room_Joinroom_args {
public:
    Room_Room_Joinroom_args( const Room_Room_Joinroom_args& );
    Room_Room_Joinroom_args& operator=( const Room_Room_Joinroom_args& );
    Room_Room_Joinroom_args() noexcept {}

    virtual ~Room_Room_Joinroom_args() noexcept;
    Room_Joinroom_SendInfo info;

    _Room_Room_Joinroom_args__isset __isset;

    void __set_info( const Room_Joinroom_SendInfo& val );

    bool operator==( const Room_Room_Joinroom_args& rhs ) const {
        if ( !( info == rhs.info ) )
            return false;
        return true;
    }
    bool operator!=( const Room_Room_Joinroom_args& rhs ) const {
        return !( *this == rhs );
    }

    bool operator<( const Room_Room_Joinroom_args& ) const;

    uint32_t read( ::apache::thrift::protocol::TProtocol* iprot );
    uint32_t write( ::apache::thrift::protocol::TProtocol* oprot ) const;
};

class Room_Room_Joinroom_pargs {
public:
    virtual ~Room_Room_Joinroom_pargs() noexcept;
    const Room_Joinroom_SendInfo* info;

    uint32_t write( ::apache::thrift::protocol::TProtocol* oprot ) const;
};

typedef struct _Room_Room_Joinroom_result__isset {
    _Room_Room_Joinroom_result__isset() : success( false ) {}
    bool success : 1;
} _Room_Room_Joinroom_result__isset;

class Room_Room_Joinroom_result {
public:
    Room_Room_Joinroom_result( const Room_Room_Joinroom_result& );
    Room_Room_Joinroom_result& operator=( const Room_Room_Joinroom_result& );
    Room_Room_Joinroom_result() noexcept {}

    virtual ~Room_Room_Joinroom_result() noexcept;
    Room_Joinroom_RecvInfo success;

    _Room_Room_Joinroom_result__isset __isset;

    void __set_success( const Room_Joinroom_RecvInfo& val );

    bool operator==( const Room_Room_Joinroom_result& rhs ) const {
        if ( !( success == rhs.success ) )
            return false;
        return true;
    }
    bool operator!=( const Room_Room_Joinroom_result& rhs ) const {
        return !( *this == rhs );
    }

    bool operator<( const Room_Room_Joinroom_result& ) const;

    uint32_t read( ::apache::thrift::protocol::TProtocol* iprot );
    uint32_t write( ::apache::thrift::protocol::TProtocol* oprot ) const;
};

typedef struct _Room_Room_Joinroom_presult__isset {
    _Room_Room_Joinroom_presult__isset() : success( false ) {}
    bool success : 1;
} _Room_Room_Joinroom_presult__isset;

class Room_Room_Joinroom_presult {
public:
    virtual ~Room_Room_Joinroom_presult() noexcept;
    Room_Joinroom_RecvInfo* success;

    _Room_Room_Joinroom_presult__isset __isset;

    uint32_t read( ::apache::thrift::protocol::TProtocol* iprot );
};

typedef struct _Room_Room_Create_args__isset {
    _Room_Room_Create_args__isset() : info( false ) {}
    bool info : 1;
} _Room_Room_Create_args__isset;

class Room_Room_Create_args {
public:
    Room_Room_Create_args( const Room_Room_Create_args& );
    Room_Room_Create_args& operator=( const Room_Room_Create_args& );
    Room_Room_Create_args() noexcept {}

    virtual ~Room_Room_Create_args() noexcept;
    Room_Create_SendInfo info;

    _Room_Room_Create_args__isset __isset;

    void __set_info( const Room_Create_SendInfo& val );

    bool operator==( const Room_Room_Create_args& rhs ) const {
        if ( !( info == rhs.info ) )
            return false;
        return true;
    }
    bool operator!=( const Room_Room_Create_args& rhs ) const {
        return !( *this == rhs );
    }

    bool operator<( const Room_Room_Create_args& ) const;

    uint32_t read( ::apache::thrift::protocol::TProtocol* iprot );
    uint32_t write( ::apache::thrift::protocol::TProtocol* oprot ) const;
};

class Room_Room_Create_pargs {
public:
    virtual ~Room_Room_Create_pargs() noexcept;
    const Room_Create_SendInfo* info;

    uint32_t write( ::apache::thrift::protocol::TProtocol* oprot ) const;
};

typedef struct _Room_Room_Create_result__isset {
    _Room_Room_Create_result__isset() : success( false ) {}
    bool success : 1;
} _Room_Room_Create_result__isset;

class Room_Room_Create_result {
public:
    Room_Room_Create_result( const Room_Room_Create_result& );
    Room_Room_Create_result& operator=( const Room_Room_Create_result& );
    Room_Room_Create_result() noexcept {}

    virtual ~Room_Room_Create_result() noexcept;
    Room_Create_RecvInfo success;

    _Room_Room_Create_result__isset __isset;

    void __set_success( const Room_Create_RecvInfo& val );

    bool operator==( const Room_Room_Create_result& rhs ) const {
        if ( !( success == rhs.success ) )
            return false;
        return true;
    }
    bool operator!=( const Room_Room_Create_result& rhs ) const {
        return !( *this == rhs );
    }

    bool operator<( const Room_Room_Create_result& ) const;

    uint32_t read( ::apache::thrift::protocol::TProtocol* iprot );
    uint32_t write( ::apache::thrift::protocol::TProtocol* oprot ) const;
};

typedef struct _Room_Room_Create_presult__isset {
    _Room_Room_Create_presult__isset() : success( false ) {}
    bool success : 1;
} _Room_Room_Create_presult__isset;

class Room_Room_Create_presult {
public:
    virtual ~Room_Room_Create_presult() noexcept;
    Room_Create_RecvInfo* success;

    _Room_Room_Create_presult__isset __isset;

    uint32_t read( ::apache::thrift::protocol::TProtocol* iprot );
};

typedef struct _Room_Room_GetURrelation_args__isset {
    _Room_Room_GetURrelation_args__isset() : info( false ) {}
    bool info : 1;
} _Room_Room_GetURrelation_args__isset;

class Room_Room_GetURrelation_args {
public:
    Room_Room_GetURrelation_args( const Room_Room_GetURrelation_args& );
    Room_Room_GetURrelation_args& operator=( const Room_Room_GetURrelation_args& );
    Room_Room_GetURrelation_args() noexcept {}

    virtual ~Room_Room_GetURrelation_args() noexcept;
    Room_GetURrelation_SendInfo info;

    _Room_Room_GetURrelation_args__isset __isset;

    void __set_info( const Room_GetURrelation_SendInfo& val );

    bool operator==( const Room_Room_GetURrelation_args& rhs ) const {
        if ( !( info == rhs.info ) )
            return false;
        return true;
    }
    bool operator!=( const Room_Room_GetURrelation_args& rhs ) const {
        return !( *this == rhs );
    }

    bool operator<( const Room_Room_GetURrelation_args& ) const;

    uint32_t read( ::apache::thrift::protocol::TProtocol* iprot );
    uint32_t write( ::apache::thrift::protocol::TProtocol* oprot ) const;
};

class Room_Room_GetURrelation_pargs {
public:
    virtual ~Room_Room_GetURrelation_pargs() noexcept;
    const Room_GetURrelation_SendInfo* info;

    uint32_t write( ::apache::thrift::protocol::TProtocol* oprot ) const;
};

typedef struct _Room_Room_GetURrelation_result__isset {
    _Room_Room_GetURrelation_result__isset() : success( false ) {}
    bool success : 1;
} _Room_Room_GetURrelation_result__isset;

class Room_Room_GetURrelation_result {
public:
    Room_Room_GetURrelation_result( const Room_Room_GetURrelation_result& );
    Room_Room_GetURrelation_result& operator=( const Room_Room_GetURrelation_result& );
    Room_Room_GetURrelation_result() noexcept {}

    virtual ~Room_Room_GetURrelation_result() noexcept;
    Room_GetURrelation_RecvInfo success;

    _Room_Room_GetURrelation_result__isset __isset;

    void __set_success( const Room_GetURrelation_RecvInfo& val );

    bool operator==( const Room_Room_GetURrelation_result& rhs ) const {
        if ( !( success == rhs.success ) )
            return false;
        return true;
    }
    bool operator!=( const Room_Room_GetURrelation_result& rhs ) const {
        return !( *this == rhs );
    }

    bool operator<( const Room_Room_GetURrelation_result& ) const;

    uint32_t read( ::apache::thrift::protocol::TProtocol* iprot );
    uint32_t write( ::apache::thrift::protocol::TProtocol* oprot ) const;
};

typedef struct _Room_Room_GetURrelation_presult__isset {
    _Room_Room_GetURrelation_presult__isset() : success( false ) {}
    bool success : 1;
} _Room_Room_GetURrelation_presult__isset;

class Room_Room_GetURrelation_presult {
public:
    virtual ~Room_Room_GetURrelation_presult() noexcept;
    Room_GetURrelation_RecvInfo* success;

    _Room_Room_GetURrelation_presult__isset __isset;

    uint32_t read( ::apache::thrift::protocol::TProtocol* iprot );
};

typedef struct _Room_Room_GetExInfo_args__isset {
    _Room_Room_GetExInfo_args__isset() : info( false ) {}
    bool info : 1;
} _Room_Room_GetExInfo_args__isset;

class Room_Room_GetExInfo_args {
public:
    Room_Room_GetExInfo_args( const Room_Room_GetExInfo_args& );
    Room_Room_GetExInfo_args& operator=( const Room_Room_GetExInfo_args& );
    Room_Room_GetExInfo_args() noexcept {}

    virtual ~Room_Room_GetExInfo_args() noexcept;
    Room_GetExInfo_SendInfo info;

    _Room_Room_GetExInfo_args__isset __isset;

    void __set_info( const Room_GetExInfo_SendInfo& val );

    bool operator==( const Room_Room_GetExInfo_args& rhs ) const {
        if ( !( info == rhs.info ) )
            return false;
        return true;
    }
    bool operator!=( const Room_Room_GetExInfo_args& rhs ) const {
        return !( *this == rhs );
    }

    bool operator<( const Room_Room_GetExInfo_args& ) const;

    uint32_t read( ::apache::thrift::protocol::TProtocol* iprot );
    uint32_t write( ::apache::thrift::protocol::TProtocol* oprot ) const;
};

class Room_Room_GetExInfo_pargs {
public:
    virtual ~Room_Room_GetExInfo_pargs() noexcept;
    const Room_GetExInfo_SendInfo* info;

    uint32_t write( ::apache::thrift::protocol::TProtocol* oprot ) const;
};

typedef struct _Room_Room_GetExInfo_result__isset {
    _Room_Room_GetExInfo_result__isset() : success( false ) {}
    bool success : 1;
} _Room_Room_GetExInfo_result__isset;

class Room_Room_GetExInfo_result {
public:
    Room_Room_GetExInfo_result( const Room_Room_GetExInfo_result& );
    Room_Room_GetExInfo_result& operator=( const Room_Room_GetExInfo_result& );
    Room_Room_GetExInfo_result() noexcept {}

    virtual ~Room_Room_GetExInfo_result() noexcept;
    Room_GetExInfo_RecvInfo success;

    _Room_Room_GetExInfo_result__isset __isset;

    void __set_success( const Room_GetExInfo_RecvInfo& val );

    bool operator==( const Room_Room_GetExInfo_result& rhs ) const {
        if ( !( success == rhs.success ) )
            return false;
        return true;
    }
    bool operator!=( const Room_Room_GetExInfo_result& rhs ) const {
        return !( *this == rhs );
    }

    bool operator<( const Room_Room_GetExInfo_result& ) const;

    uint32_t read( ::apache::thrift::protocol::TProtocol* iprot );
    uint32_t write( ::apache::thrift::protocol::TProtocol* oprot ) const;
};

typedef struct _Room_Room_GetExInfo_presult__isset {
    _Room_Room_GetExInfo_presult__isset() : success( false ) {}
    bool success : 1;
} _Room_Room_GetExInfo_presult__isset;

class Room_Room_GetExInfo_presult {
public:
    virtual ~Room_Room_GetExInfo_presult() noexcept;
    Room_GetExInfo_RecvInfo* success;

    _Room_Room_GetExInfo_presult__isset __isset;

    uint32_t read( ::apache::thrift::protocol::TProtocol* iprot );
};

typedef struct _Room_Room_GetBaseInfo_args__isset {
    _Room_Room_GetBaseInfo_args__isset() : info( false ) {}
    bool info : 1;
} _Room_Room_GetBaseInfo_args__isset;

class Room_Room_GetBaseInfo_args {
public:
    Room_Room_GetBaseInfo_args( const Room_Room_GetBaseInfo_args& );
    Room_Room_GetBaseInfo_args& operator=( const Room_Room_GetBaseInfo_args& );
    Room_Room_GetBaseInfo_args() noexcept {}

    virtual ~Room_Room_GetBaseInfo_args() noexcept;
    Room_GetBaseInfo_SendInfo info;

    _Room_Room_GetBaseInfo_args__isset __isset;

    void __set_info( const Room_GetBaseInfo_SendInfo& val );

    bool operator==( const Room_Room_GetBaseInfo_args& rhs ) const {
        if ( !( info == rhs.info ) )
            return false;
        return true;
    }
    bool operator!=( const Room_Room_GetBaseInfo_args& rhs ) const {
        return !( *this == rhs );
    }

    bool operator<( const Room_Room_GetBaseInfo_args& ) const;

    uint32_t read( ::apache::thrift::protocol::TProtocol* iprot );
    uint32_t write( ::apache::thrift::protocol::TProtocol* oprot ) const;
};

class Room_Room_GetBaseInfo_pargs {
public:
    virtual ~Room_Room_GetBaseInfo_pargs() noexcept;
    const Room_GetBaseInfo_SendInfo* info;

    uint32_t write( ::apache::thrift::protocol::TProtocol* oprot ) const;
};

typedef struct _Room_Room_GetBaseInfo_result__isset {
    _Room_Room_GetBaseInfo_result__isset() : success( false ) {}
    bool success : 1;
} _Room_Room_GetBaseInfo_result__isset;

class Room_Room_GetBaseInfo_result {
public:
    Room_Room_GetBaseInfo_result( const Room_Room_GetBaseInfo_result& );
    Room_Room_GetBaseInfo_result& operator=( const Room_Room_GetBaseInfo_result& );
    Room_Room_GetBaseInfo_result() noexcept {}

    virtual ~Room_Room_GetBaseInfo_result() noexcept;
    Room_GetBaseInfo_RecvInfo success;

    _Room_Room_GetBaseInfo_result__isset __isset;

    void __set_success( const Room_GetBaseInfo_RecvInfo& val );

    bool operator==( const Room_Room_GetBaseInfo_result& rhs ) const {
        if ( !( success == rhs.success ) )
            return false;
        return true;
    }
    bool operator!=( const Room_Room_GetBaseInfo_result& rhs ) const {
        return !( *this == rhs );
    }

    bool operator<( const Room_Room_GetBaseInfo_result& ) const;

    uint32_t read( ::apache::thrift::protocol::TProtocol* iprot );
    uint32_t write( ::apache::thrift::protocol::TProtocol* oprot ) const;
};

typedef struct _Room_Room_GetBaseInfo_presult__isset {
    _Room_Room_GetBaseInfo_presult__isset() : success( false ) {}
    bool success : 1;
} _Room_Room_GetBaseInfo_presult__isset;

class Room_Room_GetBaseInfo_presult {
public:
    virtual ~Room_Room_GetBaseInfo_presult() noexcept;
    Room_GetBaseInfo_RecvInfo* success;

    _Room_Room_GetBaseInfo_presult__isset __isset;

    uint32_t read( ::apache::thrift::protocol::TProtocol* iprot );
};

class RoomClient : virtual public RoomIf {
public:
    RoomClient( std::shared_ptr< ::apache::thrift::protocol::TProtocol > prot ) {
        setProtocol( prot );
    }
    RoomClient( std::shared_ptr< ::apache::thrift::protocol::TProtocol > iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol > oprot ) {
        setProtocol( iprot, oprot );
    }

private:
    void setProtocol( std::shared_ptr< ::apache::thrift::protocol::TProtocol > prot ) {
        setProtocol( prot, prot );
    }
    void setProtocol( std::shared_ptr< ::apache::thrift::protocol::TProtocol > iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol > oprot ) {
        piprot_ = iprot;
        poprot_ = oprot;
        iprot_  = iprot.get();
        oprot_  = oprot.get();
    }

public:
    std::shared_ptr< ::apache::thrift::protocol::TProtocol > getInputProtocol() {
        return piprot_;
    }
    std::shared_ptr< ::apache::thrift::protocol::TProtocol > getOutputProtocol() {
        return poprot_;
    }
    void Room_ChangeDebatePos( Room_ChangeDebatePos_RecvInfo& _return, const Room_ChangeDebatePos_SendInfo& info ) override;
    void send_Room_ChangeDebatePos( const Room_ChangeDebatePos_SendInfo& info );
    void recv_Room_ChangeDebatePos( Room_ChangeDebatePos_RecvInfo& _return );
    void Room_ChangeExtraInfo( Room_ChangeExtraInfo_RecvInfo& _return, const Room_ChangeExtraInfo_SendInfo& info ) override;
    void send_Room_ChangeExtraInfo( const Room_ChangeExtraInfo_SendInfo& info );
    void recv_Room_ChangeExtraInfo( Room_ChangeExtraInfo_RecvInfo& _return );
    void Room_ChangePasswd( Room_ChangePasswd_RecvInfo& _return, const Room_ChangePasswd_SendInfo& info ) override;
    void send_Room_ChangePasswd( const Room_ChangePasswd_SendInfo& info );
    void recv_Room_ChangePasswd( Room_ChangePasswd_RecvInfo& _return );
    void Room_Exitroom( Room_Exitroom_RecvInfo& _return, const Room_Exitroom_SendInfo& info ) override;
    void send_Room_Exitroom( const Room_Exitroom_SendInfo& info );
    void recv_Room_Exitroom( Room_Exitroom_RecvInfo& _return );
    void Room_Joinroom( Room_Joinroom_RecvInfo& _return, const Room_Joinroom_SendInfo& info ) override;
    void send_Room_Joinroom( const Room_Joinroom_SendInfo& info );
    void recv_Room_Joinroom( Room_Joinroom_RecvInfo& _return );
    void Room_Create( Room_Create_RecvInfo& _return, const Room_Create_SendInfo& info ) override;
    void send_Room_Create( const Room_Create_SendInfo& info );
    void recv_Room_Create( Room_Create_RecvInfo& _return );
    void Room_GetURrelation( Room_GetURrelation_RecvInfo& _return, const Room_GetURrelation_SendInfo& info ) override;
    void send_Room_GetURrelation( const Room_GetURrelation_SendInfo& info );
    void recv_Room_GetURrelation( Room_GetURrelation_RecvInfo& _return );
    void Room_GetExInfo( Room_GetExInfo_RecvInfo& _return, const Room_GetExInfo_SendInfo& info ) override;
    void send_Room_GetExInfo( const Room_GetExInfo_SendInfo& info );
    void recv_Room_GetExInfo( Room_GetExInfo_RecvInfo& _return );
    void Room_GetBaseInfo( Room_GetBaseInfo_RecvInfo& _return, const Room_GetBaseInfo_SendInfo& info ) override;
    void send_Room_GetBaseInfo( const Room_GetBaseInfo_SendInfo& info );
    void recv_Room_GetBaseInfo( Room_GetBaseInfo_RecvInfo& _return );

protected:
    std::shared_ptr< ::apache::thrift::protocol::TProtocol > piprot_;
    std::shared_ptr< ::apache::thrift::protocol::TProtocol > poprot_;
    ::apache::thrift::protocol::TProtocol*                   iprot_;
    ::apache::thrift::protocol::TProtocol*                   oprot_;
};

class RoomProcessor : public ::apache::thrift::TDispatchProcessor {
protected:
    ::std::shared_ptr< RoomIf > iface_;
    virtual bool dispatchCall( ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext ) override;

private:
    typedef void ( RoomProcessor::*ProcessFunction )( int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void* );
    typedef std::map< std::string, ProcessFunction > ProcessMap;
    ProcessMap                                       processMap_;
    void process_Room_ChangeDebatePos( int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext );
    void process_Room_ChangeExtraInfo( int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext );
    void process_Room_ChangePasswd( int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext );
    void process_Room_Exitroom( int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext );
    void process_Room_Joinroom( int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext );
    void process_Room_Create( int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext );
    void process_Room_GetURrelation( int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext );
    void process_Room_GetExInfo( int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext );
    void process_Room_GetBaseInfo( int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext );

public:
    RoomProcessor( ::std::shared_ptr< RoomIf > iface ) : iface_( iface ) {
        processMap_[ "Room_ChangeDebatePos" ] = &RoomProcessor::process_Room_ChangeDebatePos;
        processMap_[ "Room_ChangeExtraInfo" ] = &RoomProcessor::process_Room_ChangeExtraInfo;
        processMap_[ "Room_ChangePasswd" ]    = &RoomProcessor::process_Room_ChangePasswd;
        processMap_[ "Room_Exitroom" ]        = &RoomProcessor::process_Room_Exitroom;
        processMap_[ "Room_Joinroom" ]        = &RoomProcessor::process_Room_Joinroom;
        processMap_[ "Room_Create" ]          = &RoomProcessor::process_Room_Create;
        processMap_[ "Room_GetURrelation" ]   = &RoomProcessor::process_Room_GetURrelation;
        processMap_[ "Room_GetExInfo" ]       = &RoomProcessor::process_Room_GetExInfo;
        processMap_[ "Room_GetBaseInfo" ]     = &RoomProcessor::process_Room_GetBaseInfo;
    }

    virtual ~RoomProcessor() {}
};

class RoomProcessorFactory : public ::apache::thrift::TProcessorFactory {
public:
    RoomProcessorFactory( const ::std::shared_ptr< RoomIfFactory >& handlerFactory ) noexcept : handlerFactory_( handlerFactory ) {}

    ::std::shared_ptr< ::apache::thrift::TProcessor > getProcessor( const ::apache::thrift::TConnectionInfo& connInfo ) override;

protected:
    ::std::shared_ptr< RoomIfFactory > handlerFactory_;
};

class RoomMultiface : virtual public RoomIf {
public:
    RoomMultiface( std::vector< std::shared_ptr< RoomIf > >& ifaces ) : ifaces_( ifaces ) {}
    virtual ~RoomMultiface() {}

protected:
    std::vector< std::shared_ptr< RoomIf > > ifaces_;
    RoomMultiface() {}
    void add( ::std::shared_ptr< RoomIf > iface ) {
        ifaces_.push_back( iface );
    }

public:
    void Room_ChangeDebatePos( Room_ChangeDebatePos_RecvInfo& _return, const Room_ChangeDebatePos_SendInfo& info ) override {
        size_t sz = ifaces_.size();
        size_t i  = 0;
        for ( ; i < ( sz - 1 ); ++i ) {
            ifaces_[ i ]->Room_ChangeDebatePos( _return, info );
        }
        ifaces_[ i ]->Room_ChangeDebatePos( _return, info );
        return;
    }

    void Room_ChangeExtraInfo( Room_ChangeExtraInfo_RecvInfo& _return, const Room_ChangeExtraInfo_SendInfo& info ) override {
        size_t sz = ifaces_.size();
        size_t i  = 0;
        for ( ; i < ( sz - 1 ); ++i ) {
            ifaces_[ i ]->Room_ChangeExtraInfo( _return, info );
        }
        ifaces_[ i ]->Room_ChangeExtraInfo( _return, info );
        return;
    }

    void Room_ChangePasswd( Room_ChangePasswd_RecvInfo& _return, const Room_ChangePasswd_SendInfo& info ) override {
        size_t sz = ifaces_.size();
        size_t i  = 0;
        for ( ; i < ( sz - 1 ); ++i ) {
            ifaces_[ i ]->Room_ChangePasswd( _return, info );
        }
        ifaces_[ i ]->Room_ChangePasswd( _return, info );
        return;
    }

    void Room_Exitroom( Room_Exitroom_RecvInfo& _return, const Room_Exitroom_SendInfo& info ) override {
        size_t sz = ifaces_.size();
        size_t i  = 0;
        for ( ; i < ( sz - 1 ); ++i ) {
            ifaces_[ i ]->Room_Exitroom( _return, info );
        }
        ifaces_[ i ]->Room_Exitroom( _return, info );
        return;
    }

    void Room_Joinroom( Room_Joinroom_RecvInfo& _return, const Room_Joinroom_SendInfo& info ) override {
        size_t sz = ifaces_.size();
        size_t i  = 0;
        for ( ; i < ( sz - 1 ); ++i ) {
            ifaces_[ i ]->Room_Joinroom( _return, info );
        }
        ifaces_[ i ]->Room_Joinroom( _return, info );
        return;
    }

    void Room_Create( Room_Create_RecvInfo& _return, const Room_Create_SendInfo& info ) override {
        size_t sz = ifaces_.size();
        size_t i  = 0;
        for ( ; i < ( sz - 1 ); ++i ) {
            ifaces_[ i ]->Room_Create( _return, info );
        }
        ifaces_[ i ]->Room_Create( _return, info );
        return;
    }

    void Room_GetURrelation( Room_GetURrelation_RecvInfo& _return, const Room_GetURrelation_SendInfo& info ) override {
        size_t sz = ifaces_.size();
        size_t i  = 0;
        for ( ; i < ( sz - 1 ); ++i ) {
            ifaces_[ i ]->Room_GetURrelation( _return, info );
        }
        ifaces_[ i ]->Room_GetURrelation( _return, info );
        return;
    }

    void Room_GetExInfo( Room_GetExInfo_RecvInfo& _return, const Room_GetExInfo_SendInfo& info ) override {
        size_t sz = ifaces_.size();
        size_t i  = 0;
        for ( ; i < ( sz - 1 ); ++i ) {
            ifaces_[ i ]->Room_GetExInfo( _return, info );
        }
        ifaces_[ i ]->Room_GetExInfo( _return, info );
        return;
    }

    void Room_GetBaseInfo( Room_GetBaseInfo_RecvInfo& _return, const Room_GetBaseInfo_SendInfo& info ) override {
        size_t sz = ifaces_.size();
        size_t i  = 0;
        for ( ; i < ( sz - 1 ); ++i ) {
            ifaces_[ i ]->Room_GetBaseInfo( _return, info );
        }
        ifaces_[ i ]->Room_GetBaseInfo( _return, info );
        return;
    }
};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class RoomConcurrentClient : virtual public RoomIf {
public:
    RoomConcurrentClient( std::shared_ptr< ::apache::thrift::protocol::TProtocol > prot, std::shared_ptr< ::apache::thrift::async::TConcurrentClientSyncInfo > sync ) : sync_( sync ) {
        setProtocol( prot );
    }
    RoomConcurrentClient( std::shared_ptr< ::apache::thrift::protocol::TProtocol > iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol > oprot,
                          std::shared_ptr< ::apache::thrift::async::TConcurrentClientSyncInfo > sync )
        : sync_( sync ) {
        setProtocol( iprot, oprot );
    }

private:
    void setProtocol( std::shared_ptr< ::apache::thrift::protocol::TProtocol > prot ) {
        setProtocol( prot, prot );
    }
    void setProtocol( std::shared_ptr< ::apache::thrift::protocol::TProtocol > iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol > oprot ) {
        piprot_ = iprot;
        poprot_ = oprot;
        iprot_  = iprot.get();
        oprot_  = oprot.get();
    }

public:
    std::shared_ptr< ::apache::thrift::protocol::TProtocol > getInputProtocol() {
        return piprot_;
    }
    std::shared_ptr< ::apache::thrift::protocol::TProtocol > getOutputProtocol() {
        return poprot_;
    }
    void    Room_ChangeDebatePos( Room_ChangeDebatePos_RecvInfo& _return, const Room_ChangeDebatePos_SendInfo& info ) override;
    int32_t send_Room_ChangeDebatePos( const Room_ChangeDebatePos_SendInfo& info );
    void    recv_Room_ChangeDebatePos( Room_ChangeDebatePos_RecvInfo& _return, const int32_t seqid );
    void    Room_ChangeExtraInfo( Room_ChangeExtraInfo_RecvInfo& _return, const Room_ChangeExtraInfo_SendInfo& info ) override;
    int32_t send_Room_ChangeExtraInfo( const Room_ChangeExtraInfo_SendInfo& info );
    void    recv_Room_ChangeExtraInfo( Room_ChangeExtraInfo_RecvInfo& _return, const int32_t seqid );
    void    Room_ChangePasswd( Room_ChangePasswd_RecvInfo& _return, const Room_ChangePasswd_SendInfo& info ) override;
    int32_t send_Room_ChangePasswd( const Room_ChangePasswd_SendInfo& info );
    void    recv_Room_ChangePasswd( Room_ChangePasswd_RecvInfo& _return, const int32_t seqid );
    void    Room_Exitroom( Room_Exitroom_RecvInfo& _return, const Room_Exitroom_SendInfo& info ) override;
    int32_t send_Room_Exitroom( const Room_Exitroom_SendInfo& info );
    void    recv_Room_Exitroom( Room_Exitroom_RecvInfo& _return, const int32_t seqid );
    void    Room_Joinroom( Room_Joinroom_RecvInfo& _return, const Room_Joinroom_SendInfo& info ) override;
    int32_t send_Room_Joinroom( const Room_Joinroom_SendInfo& info );
    void    recv_Room_Joinroom( Room_Joinroom_RecvInfo& _return, const int32_t seqid );
    void    Room_Create( Room_Create_RecvInfo& _return, const Room_Create_SendInfo& info ) override;
    int32_t send_Room_Create( const Room_Create_SendInfo& info );
    void    recv_Room_Create( Room_Create_RecvInfo& _return, const int32_t seqid );
    void    Room_GetURrelation( Room_GetURrelation_RecvInfo& _return, const Room_GetURrelation_SendInfo& info ) override;
    int32_t send_Room_GetURrelation( const Room_GetURrelation_SendInfo& info );
    void    recv_Room_GetURrelation( Room_GetURrelation_RecvInfo& _return, const int32_t seqid );
    void    Room_GetExInfo( Room_GetExInfo_RecvInfo& _return, const Room_GetExInfo_SendInfo& info ) override;
    int32_t send_Room_GetExInfo( const Room_GetExInfo_SendInfo& info );
    void    recv_Room_GetExInfo( Room_GetExInfo_RecvInfo& _return, const int32_t seqid );
    void    Room_GetBaseInfo( Room_GetBaseInfo_RecvInfo& _return, const Room_GetBaseInfo_SendInfo& info ) override;
    int32_t send_Room_GetBaseInfo( const Room_GetBaseInfo_SendInfo& info );
    void    recv_Room_GetBaseInfo( Room_GetBaseInfo_RecvInfo& _return, const int32_t seqid );

protected:
    std::shared_ptr< ::apache::thrift::protocol::TProtocol >              piprot_;
    std::shared_ptr< ::apache::thrift::protocol::TProtocol >              poprot_;
    ::apache::thrift::protocol::TProtocol*                                iprot_;
    ::apache::thrift::protocol::TProtocol*                                oprot_;
    std::shared_ptr< ::apache::thrift::async::TConcurrentClientSyncInfo > sync_;
};

#ifdef _MSC_VER
#pragma warning( pop )
#endif

#endif
