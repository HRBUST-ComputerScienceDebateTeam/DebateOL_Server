/**
 * Autogenerated by Thrift Compiler (0.19.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef User_H
#define User_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include <memory>
#include "user_types.h"



#ifdef _MSC_VER
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class UserIf {
 public:
  virtual ~UserIf() {}
  virtual void User_GetBaseInfo(User_GetBaseInfo_RecvInfo& _return, const User_GetBaseInfo_SendInfo& info) = 0;
  virtual void User_GetSocialInfo(User_GetSocialInfo_RecvInfo& _return, const User_GetSocialInfo_SendInfo& info) = 0;
  virtual void User_GetExInfo(User_GetExInfo_RecvInfo& _return, const User_GetExInfo_SendInfo& info) = 0;
  virtual void User_login_num(User_login_RecvInfo& _return, const User_login_num_SendInfo& info) = 0;
  virtual void User_login_Tel(User_login_RecvInfo& _return, const User_login_Tel_SendInfo& info) = 0;
  virtual void User_reg(User_reg_RecvInfo& _return, const User_reg_SendInfo& info) = 0;
  virtual void User_logoff(User_logoff_RecvInfo& _return, const User_logoff_SendInfo& info) = 0;
  virtual void User_refresh_jwt1(User_refresh_jwt1_RecvInfo& _return, const User_refresh_jwt1_SendInfo& info) = 0;
  virtual void User_refresh_jwt2(User_refresh_jwt2_RecvInfo& _return, const User_refresh_jwt2_SendInfo& info) = 0;
  virtual void User_ModifyBaseInfo(User_ModifyBaseInfo_RecvInfo& _return, const User_ModifyBaseInfo_SendInfo& info) = 0;
  virtual void User_ModifySocialInfo(User_ModifySocialInfo_RecvInfo& _return, const User_ModifySocialInfo_SendInfo& info) = 0;
  virtual void User_ModifyExInfo(User_ModifyExInfo_RecvInfo& _return, const User_ModifyExInfo_SendInfo& info) = 0;
  virtual void User_follow(User_follow_RecvInfo& _return, const User_follow_SendInfo& info) = 0;
  virtual void User_followed(User_followed_RecvInfo& _return, const User_followed_SendInfo& info) = 0;
  virtual void User_friend(User_friend_RecvInfo& _return, const User_friend_SendInfo& info) = 0;
};

class UserIfFactory {
 public:
  typedef UserIf Handler;

  virtual ~UserIfFactory() {}

  virtual UserIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(UserIf* /* handler */) = 0;
  };

class UserIfSingletonFactory : virtual public UserIfFactory {
 public:
  UserIfSingletonFactory(const ::std::shared_ptr<UserIf>& iface) : iface_(iface) {}
  virtual ~UserIfSingletonFactory() {}

  virtual UserIf* getHandler(const ::apache::thrift::TConnectionInfo&) override {
    return iface_.get();
  }
  virtual void releaseHandler(UserIf* /* handler */) override {}

 protected:
  ::std::shared_ptr<UserIf> iface_;
};

class UserNull : virtual public UserIf {
 public:
  virtual ~UserNull() {}
  void User_GetBaseInfo(User_GetBaseInfo_RecvInfo& /* _return */, const User_GetBaseInfo_SendInfo& /* info */) override {
    return;
  }
  void User_GetSocialInfo(User_GetSocialInfo_RecvInfo& /* _return */, const User_GetSocialInfo_SendInfo& /* info */) override {
    return;
  }
  void User_GetExInfo(User_GetExInfo_RecvInfo& /* _return */, const User_GetExInfo_SendInfo& /* info */) override {
    return;
  }
  void User_login_num(User_login_RecvInfo& /* _return */, const User_login_num_SendInfo& /* info */) override {
    return;
  }
  void User_login_Tel(User_login_RecvInfo& /* _return */, const User_login_Tel_SendInfo& /* info */) override {
    return;
  }
  void User_reg(User_reg_RecvInfo& /* _return */, const User_reg_SendInfo& /* info */) override {
    return;
  }
  void User_logoff(User_logoff_RecvInfo& /* _return */, const User_logoff_SendInfo& /* info */) override {
    return;
  }
  void User_refresh_jwt1(User_refresh_jwt1_RecvInfo& /* _return */, const User_refresh_jwt1_SendInfo& /* info */) override {
    return;
  }
  void User_refresh_jwt2(User_refresh_jwt2_RecvInfo& /* _return */, const User_refresh_jwt2_SendInfo& /* info */) override {
    return;
  }
  void User_ModifyBaseInfo(User_ModifyBaseInfo_RecvInfo& /* _return */, const User_ModifyBaseInfo_SendInfo& /* info */) override {
    return;
  }
  void User_ModifySocialInfo(User_ModifySocialInfo_RecvInfo& /* _return */, const User_ModifySocialInfo_SendInfo& /* info */) override {
    return;
  }
  void User_ModifyExInfo(User_ModifyExInfo_RecvInfo& /* _return */, const User_ModifyExInfo_SendInfo& /* info */) override {
    return;
  }
  void User_follow(User_follow_RecvInfo& /* _return */, const User_follow_SendInfo& /* info */) override {
    return;
  }
  void User_followed(User_followed_RecvInfo& /* _return */, const User_followed_SendInfo& /* info */) override {
    return;
  }
  void User_friend(User_friend_RecvInfo& /* _return */, const User_friend_SendInfo& /* info */) override {
    return;
  }
};

typedef struct _User_User_GetBaseInfo_args__isset {
  _User_User_GetBaseInfo_args__isset() : info(false) {}
  bool info :1;
} _User_User_GetBaseInfo_args__isset;

class User_User_GetBaseInfo_args {
 public:

  User_User_GetBaseInfo_args(const User_User_GetBaseInfo_args&);
  User_User_GetBaseInfo_args& operator=(const User_User_GetBaseInfo_args&);
  User_User_GetBaseInfo_args() noexcept {
  }

  virtual ~User_User_GetBaseInfo_args() noexcept;
  User_GetBaseInfo_SendInfo info;

  _User_User_GetBaseInfo_args__isset __isset;

  void __set_info(const User_GetBaseInfo_SendInfo& val);

  bool operator == (const User_User_GetBaseInfo_args & rhs) const
  {
    if (!(info == rhs.info))
      return false;
    return true;
  }
  bool operator != (const User_User_GetBaseInfo_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const User_User_GetBaseInfo_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class User_User_GetBaseInfo_pargs {
 public:


  virtual ~User_User_GetBaseInfo_pargs() noexcept;
  const User_GetBaseInfo_SendInfo* info;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _User_User_GetBaseInfo_result__isset {
  _User_User_GetBaseInfo_result__isset() : success(false) {}
  bool success :1;
} _User_User_GetBaseInfo_result__isset;

class User_User_GetBaseInfo_result {
 public:

  User_User_GetBaseInfo_result(const User_User_GetBaseInfo_result&);
  User_User_GetBaseInfo_result& operator=(const User_User_GetBaseInfo_result&);
  User_User_GetBaseInfo_result() noexcept {
  }

  virtual ~User_User_GetBaseInfo_result() noexcept;
  User_GetBaseInfo_RecvInfo success;

  _User_User_GetBaseInfo_result__isset __isset;

  void __set_success(const User_GetBaseInfo_RecvInfo& val);

  bool operator == (const User_User_GetBaseInfo_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const User_User_GetBaseInfo_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const User_User_GetBaseInfo_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _User_User_GetBaseInfo_presult__isset {
  _User_User_GetBaseInfo_presult__isset() : success(false) {}
  bool success :1;
} _User_User_GetBaseInfo_presult__isset;

class User_User_GetBaseInfo_presult {
 public:


  virtual ~User_User_GetBaseInfo_presult() noexcept;
  User_GetBaseInfo_RecvInfo* success;

  _User_User_GetBaseInfo_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _User_User_GetSocialInfo_args__isset {
  _User_User_GetSocialInfo_args__isset() : info(false) {}
  bool info :1;
} _User_User_GetSocialInfo_args__isset;

class User_User_GetSocialInfo_args {
 public:

  User_User_GetSocialInfo_args(const User_User_GetSocialInfo_args&);
  User_User_GetSocialInfo_args& operator=(const User_User_GetSocialInfo_args&);
  User_User_GetSocialInfo_args() noexcept {
  }

  virtual ~User_User_GetSocialInfo_args() noexcept;
  User_GetSocialInfo_SendInfo info;

  _User_User_GetSocialInfo_args__isset __isset;

  void __set_info(const User_GetSocialInfo_SendInfo& val);

  bool operator == (const User_User_GetSocialInfo_args & rhs) const
  {
    if (!(info == rhs.info))
      return false;
    return true;
  }
  bool operator != (const User_User_GetSocialInfo_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const User_User_GetSocialInfo_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class User_User_GetSocialInfo_pargs {
 public:


  virtual ~User_User_GetSocialInfo_pargs() noexcept;
  const User_GetSocialInfo_SendInfo* info;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _User_User_GetSocialInfo_result__isset {
  _User_User_GetSocialInfo_result__isset() : success(false) {}
  bool success :1;
} _User_User_GetSocialInfo_result__isset;

class User_User_GetSocialInfo_result {
 public:

  User_User_GetSocialInfo_result(const User_User_GetSocialInfo_result&);
  User_User_GetSocialInfo_result& operator=(const User_User_GetSocialInfo_result&);
  User_User_GetSocialInfo_result() noexcept {
  }

  virtual ~User_User_GetSocialInfo_result() noexcept;
  User_GetSocialInfo_RecvInfo success;

  _User_User_GetSocialInfo_result__isset __isset;

  void __set_success(const User_GetSocialInfo_RecvInfo& val);

  bool operator == (const User_User_GetSocialInfo_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const User_User_GetSocialInfo_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const User_User_GetSocialInfo_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _User_User_GetSocialInfo_presult__isset {
  _User_User_GetSocialInfo_presult__isset() : success(false) {}
  bool success :1;
} _User_User_GetSocialInfo_presult__isset;

class User_User_GetSocialInfo_presult {
 public:


  virtual ~User_User_GetSocialInfo_presult() noexcept;
  User_GetSocialInfo_RecvInfo* success;

  _User_User_GetSocialInfo_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _User_User_GetExInfo_args__isset {
  _User_User_GetExInfo_args__isset() : info(false) {}
  bool info :1;
} _User_User_GetExInfo_args__isset;

class User_User_GetExInfo_args {
 public:

  User_User_GetExInfo_args(const User_User_GetExInfo_args&);
  User_User_GetExInfo_args& operator=(const User_User_GetExInfo_args&);
  User_User_GetExInfo_args() noexcept {
  }

  virtual ~User_User_GetExInfo_args() noexcept;
  User_GetExInfo_SendInfo info;

  _User_User_GetExInfo_args__isset __isset;

  void __set_info(const User_GetExInfo_SendInfo& val);

  bool operator == (const User_User_GetExInfo_args & rhs) const
  {
    if (!(info == rhs.info))
      return false;
    return true;
  }
  bool operator != (const User_User_GetExInfo_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const User_User_GetExInfo_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class User_User_GetExInfo_pargs {
 public:


  virtual ~User_User_GetExInfo_pargs() noexcept;
  const User_GetExInfo_SendInfo* info;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _User_User_GetExInfo_result__isset {
  _User_User_GetExInfo_result__isset() : success(false) {}
  bool success :1;
} _User_User_GetExInfo_result__isset;

class User_User_GetExInfo_result {
 public:

  User_User_GetExInfo_result(const User_User_GetExInfo_result&);
  User_User_GetExInfo_result& operator=(const User_User_GetExInfo_result&);
  User_User_GetExInfo_result() noexcept {
  }

  virtual ~User_User_GetExInfo_result() noexcept;
  User_GetExInfo_RecvInfo success;

  _User_User_GetExInfo_result__isset __isset;

  void __set_success(const User_GetExInfo_RecvInfo& val);

  bool operator == (const User_User_GetExInfo_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const User_User_GetExInfo_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const User_User_GetExInfo_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _User_User_GetExInfo_presult__isset {
  _User_User_GetExInfo_presult__isset() : success(false) {}
  bool success :1;
} _User_User_GetExInfo_presult__isset;

class User_User_GetExInfo_presult {
 public:


  virtual ~User_User_GetExInfo_presult() noexcept;
  User_GetExInfo_RecvInfo* success;

  _User_User_GetExInfo_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _User_User_login_num_args__isset {
  _User_User_login_num_args__isset() : info(false) {}
  bool info :1;
} _User_User_login_num_args__isset;

class User_User_login_num_args {
 public:

  User_User_login_num_args(const User_User_login_num_args&);
  User_User_login_num_args& operator=(const User_User_login_num_args&);
  User_User_login_num_args() noexcept {
  }

  virtual ~User_User_login_num_args() noexcept;
  User_login_num_SendInfo info;

  _User_User_login_num_args__isset __isset;

  void __set_info(const User_login_num_SendInfo& val);

  bool operator == (const User_User_login_num_args & rhs) const
  {
    if (!(info == rhs.info))
      return false;
    return true;
  }
  bool operator != (const User_User_login_num_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const User_User_login_num_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class User_User_login_num_pargs {
 public:


  virtual ~User_User_login_num_pargs() noexcept;
  const User_login_num_SendInfo* info;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _User_User_login_num_result__isset {
  _User_User_login_num_result__isset() : success(false) {}
  bool success :1;
} _User_User_login_num_result__isset;

class User_User_login_num_result {
 public:

  User_User_login_num_result(const User_User_login_num_result&);
  User_User_login_num_result& operator=(const User_User_login_num_result&);
  User_User_login_num_result() noexcept {
  }

  virtual ~User_User_login_num_result() noexcept;
  User_login_RecvInfo success;

  _User_User_login_num_result__isset __isset;

  void __set_success(const User_login_RecvInfo& val);

  bool operator == (const User_User_login_num_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const User_User_login_num_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const User_User_login_num_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _User_User_login_num_presult__isset {
  _User_User_login_num_presult__isset() : success(false) {}
  bool success :1;
} _User_User_login_num_presult__isset;

class User_User_login_num_presult {
 public:


  virtual ~User_User_login_num_presult() noexcept;
  User_login_RecvInfo* success;

  _User_User_login_num_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _User_User_login_Tel_args__isset {
  _User_User_login_Tel_args__isset() : info(false) {}
  bool info :1;
} _User_User_login_Tel_args__isset;

class User_User_login_Tel_args {
 public:

  User_User_login_Tel_args(const User_User_login_Tel_args&);
  User_User_login_Tel_args& operator=(const User_User_login_Tel_args&);
  User_User_login_Tel_args() noexcept {
  }

  virtual ~User_User_login_Tel_args() noexcept;
  User_login_Tel_SendInfo info;

  _User_User_login_Tel_args__isset __isset;

  void __set_info(const User_login_Tel_SendInfo& val);

  bool operator == (const User_User_login_Tel_args & rhs) const
  {
    if (!(info == rhs.info))
      return false;
    return true;
  }
  bool operator != (const User_User_login_Tel_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const User_User_login_Tel_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class User_User_login_Tel_pargs {
 public:


  virtual ~User_User_login_Tel_pargs() noexcept;
  const User_login_Tel_SendInfo* info;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _User_User_login_Tel_result__isset {
  _User_User_login_Tel_result__isset() : success(false) {}
  bool success :1;
} _User_User_login_Tel_result__isset;

class User_User_login_Tel_result {
 public:

  User_User_login_Tel_result(const User_User_login_Tel_result&);
  User_User_login_Tel_result& operator=(const User_User_login_Tel_result&);
  User_User_login_Tel_result() noexcept {
  }

  virtual ~User_User_login_Tel_result() noexcept;
  User_login_RecvInfo success;

  _User_User_login_Tel_result__isset __isset;

  void __set_success(const User_login_RecvInfo& val);

  bool operator == (const User_User_login_Tel_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const User_User_login_Tel_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const User_User_login_Tel_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _User_User_login_Tel_presult__isset {
  _User_User_login_Tel_presult__isset() : success(false) {}
  bool success :1;
} _User_User_login_Tel_presult__isset;

class User_User_login_Tel_presult {
 public:


  virtual ~User_User_login_Tel_presult() noexcept;
  User_login_RecvInfo* success;

  _User_User_login_Tel_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _User_User_reg_args__isset {
  _User_User_reg_args__isset() : info(false) {}
  bool info :1;
} _User_User_reg_args__isset;

class User_User_reg_args {
 public:

  User_User_reg_args(const User_User_reg_args&);
  User_User_reg_args& operator=(const User_User_reg_args&);
  User_User_reg_args() noexcept {
  }

  virtual ~User_User_reg_args() noexcept;
  User_reg_SendInfo info;

  _User_User_reg_args__isset __isset;

  void __set_info(const User_reg_SendInfo& val);

  bool operator == (const User_User_reg_args & rhs) const
  {
    if (!(info == rhs.info))
      return false;
    return true;
  }
  bool operator != (const User_User_reg_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const User_User_reg_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class User_User_reg_pargs {
 public:


  virtual ~User_User_reg_pargs() noexcept;
  const User_reg_SendInfo* info;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _User_User_reg_result__isset {
  _User_User_reg_result__isset() : success(false) {}
  bool success :1;
} _User_User_reg_result__isset;

class User_User_reg_result {
 public:

  User_User_reg_result(const User_User_reg_result&) noexcept;
  User_User_reg_result& operator=(const User_User_reg_result&) noexcept;
  User_User_reg_result() noexcept {
  }

  virtual ~User_User_reg_result() noexcept;
  User_reg_RecvInfo success;

  _User_User_reg_result__isset __isset;

  void __set_success(const User_reg_RecvInfo& val);

  bool operator == (const User_User_reg_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const User_User_reg_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const User_User_reg_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _User_User_reg_presult__isset {
  _User_User_reg_presult__isset() : success(false) {}
  bool success :1;
} _User_User_reg_presult__isset;

class User_User_reg_presult {
 public:


  virtual ~User_User_reg_presult() noexcept;
  User_reg_RecvInfo* success;

  _User_User_reg_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _User_User_logoff_args__isset {
  _User_User_logoff_args__isset() : info(false) {}
  bool info :1;
} _User_User_logoff_args__isset;

class User_User_logoff_args {
 public:

  User_User_logoff_args(const User_User_logoff_args&) noexcept;
  User_User_logoff_args& operator=(const User_User_logoff_args&) noexcept;
  User_User_logoff_args() noexcept {
  }

  virtual ~User_User_logoff_args() noexcept;
  User_logoff_SendInfo info;

  _User_User_logoff_args__isset __isset;

  void __set_info(const User_logoff_SendInfo& val);

  bool operator == (const User_User_logoff_args & rhs) const
  {
    if (!(info == rhs.info))
      return false;
    return true;
  }
  bool operator != (const User_User_logoff_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const User_User_logoff_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class User_User_logoff_pargs {
 public:


  virtual ~User_User_logoff_pargs() noexcept;
  const User_logoff_SendInfo* info;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _User_User_logoff_result__isset {
  _User_User_logoff_result__isset() : success(false) {}
  bool success :1;
} _User_User_logoff_result__isset;

class User_User_logoff_result {
 public:

  User_User_logoff_result(const User_User_logoff_result&) noexcept;
  User_User_logoff_result& operator=(const User_User_logoff_result&) noexcept;
  User_User_logoff_result() noexcept {
  }

  virtual ~User_User_logoff_result() noexcept;
  User_logoff_RecvInfo success;

  _User_User_logoff_result__isset __isset;

  void __set_success(const User_logoff_RecvInfo& val);

  bool operator == (const User_User_logoff_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const User_User_logoff_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const User_User_logoff_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _User_User_logoff_presult__isset {
  _User_User_logoff_presult__isset() : success(false) {}
  bool success :1;
} _User_User_logoff_presult__isset;

class User_User_logoff_presult {
 public:


  virtual ~User_User_logoff_presult() noexcept;
  User_logoff_RecvInfo* success;

  _User_User_logoff_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _User_User_refresh_jwt1_args__isset {
  _User_User_refresh_jwt1_args__isset() : info(false) {}
  bool info :1;
} _User_User_refresh_jwt1_args__isset;

class User_User_refresh_jwt1_args {
 public:

  User_User_refresh_jwt1_args(const User_User_refresh_jwt1_args&);
  User_User_refresh_jwt1_args& operator=(const User_User_refresh_jwt1_args&);
  User_User_refresh_jwt1_args() noexcept {
  }

  virtual ~User_User_refresh_jwt1_args() noexcept;
  User_refresh_jwt1_SendInfo info;

  _User_User_refresh_jwt1_args__isset __isset;

  void __set_info(const User_refresh_jwt1_SendInfo& val);

  bool operator == (const User_User_refresh_jwt1_args & rhs) const
  {
    if (!(info == rhs.info))
      return false;
    return true;
  }
  bool operator != (const User_User_refresh_jwt1_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const User_User_refresh_jwt1_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class User_User_refresh_jwt1_pargs {
 public:


  virtual ~User_User_refresh_jwt1_pargs() noexcept;
  const User_refresh_jwt1_SendInfo* info;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _User_User_refresh_jwt1_result__isset {
  _User_User_refresh_jwt1_result__isset() : success(false) {}
  bool success :1;
} _User_User_refresh_jwt1_result__isset;

class User_User_refresh_jwt1_result {
 public:

  User_User_refresh_jwt1_result(const User_User_refresh_jwt1_result&);
  User_User_refresh_jwt1_result& operator=(const User_User_refresh_jwt1_result&);
  User_User_refresh_jwt1_result() noexcept {
  }

  virtual ~User_User_refresh_jwt1_result() noexcept;
  User_refresh_jwt1_RecvInfo success;

  _User_User_refresh_jwt1_result__isset __isset;

  void __set_success(const User_refresh_jwt1_RecvInfo& val);

  bool operator == (const User_User_refresh_jwt1_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const User_User_refresh_jwt1_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const User_User_refresh_jwt1_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _User_User_refresh_jwt1_presult__isset {
  _User_User_refresh_jwt1_presult__isset() : success(false) {}
  bool success :1;
} _User_User_refresh_jwt1_presult__isset;

class User_User_refresh_jwt1_presult {
 public:


  virtual ~User_User_refresh_jwt1_presult() noexcept;
  User_refresh_jwt1_RecvInfo* success;

  _User_User_refresh_jwt1_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _User_User_refresh_jwt2_args__isset {
  _User_User_refresh_jwt2_args__isset() : info(false) {}
  bool info :1;
} _User_User_refresh_jwt2_args__isset;

class User_User_refresh_jwt2_args {
 public:

  User_User_refresh_jwt2_args(const User_User_refresh_jwt2_args&);
  User_User_refresh_jwt2_args& operator=(const User_User_refresh_jwt2_args&);
  User_User_refresh_jwt2_args() noexcept {
  }

  virtual ~User_User_refresh_jwt2_args() noexcept;
  User_refresh_jwt2_SendInfo info;

  _User_User_refresh_jwt2_args__isset __isset;

  void __set_info(const User_refresh_jwt2_SendInfo& val);

  bool operator == (const User_User_refresh_jwt2_args & rhs) const
  {
    if (!(info == rhs.info))
      return false;
    return true;
  }
  bool operator != (const User_User_refresh_jwt2_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const User_User_refresh_jwt2_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class User_User_refresh_jwt2_pargs {
 public:


  virtual ~User_User_refresh_jwt2_pargs() noexcept;
  const User_refresh_jwt2_SendInfo* info;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _User_User_refresh_jwt2_result__isset {
  _User_User_refresh_jwt2_result__isset() : success(false) {}
  bool success :1;
} _User_User_refresh_jwt2_result__isset;

class User_User_refresh_jwt2_result {
 public:

  User_User_refresh_jwt2_result(const User_User_refresh_jwt2_result&);
  User_User_refresh_jwt2_result& operator=(const User_User_refresh_jwt2_result&);
  User_User_refresh_jwt2_result() noexcept {
  }

  virtual ~User_User_refresh_jwt2_result() noexcept;
  User_refresh_jwt2_RecvInfo success;

  _User_User_refresh_jwt2_result__isset __isset;

  void __set_success(const User_refresh_jwt2_RecvInfo& val);

  bool operator == (const User_User_refresh_jwt2_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const User_User_refresh_jwt2_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const User_User_refresh_jwt2_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _User_User_refresh_jwt2_presult__isset {
  _User_User_refresh_jwt2_presult__isset() : success(false) {}
  bool success :1;
} _User_User_refresh_jwt2_presult__isset;

class User_User_refresh_jwt2_presult {
 public:


  virtual ~User_User_refresh_jwt2_presult() noexcept;
  User_refresh_jwt2_RecvInfo* success;

  _User_User_refresh_jwt2_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _User_User_ModifyBaseInfo_args__isset {
  _User_User_ModifyBaseInfo_args__isset() : info(false) {}
  bool info :1;
} _User_User_ModifyBaseInfo_args__isset;

class User_User_ModifyBaseInfo_args {
 public:

  User_User_ModifyBaseInfo_args(const User_User_ModifyBaseInfo_args&);
  User_User_ModifyBaseInfo_args& operator=(const User_User_ModifyBaseInfo_args&);
  User_User_ModifyBaseInfo_args() noexcept {
  }

  virtual ~User_User_ModifyBaseInfo_args() noexcept;
  User_ModifyBaseInfo_SendInfo info;

  _User_User_ModifyBaseInfo_args__isset __isset;

  void __set_info(const User_ModifyBaseInfo_SendInfo& val);

  bool operator == (const User_User_ModifyBaseInfo_args & rhs) const
  {
    if (!(info == rhs.info))
      return false;
    return true;
  }
  bool operator != (const User_User_ModifyBaseInfo_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const User_User_ModifyBaseInfo_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class User_User_ModifyBaseInfo_pargs {
 public:


  virtual ~User_User_ModifyBaseInfo_pargs() noexcept;
  const User_ModifyBaseInfo_SendInfo* info;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _User_User_ModifyBaseInfo_result__isset {
  _User_User_ModifyBaseInfo_result__isset() : success(false) {}
  bool success :1;
} _User_User_ModifyBaseInfo_result__isset;

class User_User_ModifyBaseInfo_result {
 public:

  User_User_ModifyBaseInfo_result(const User_User_ModifyBaseInfo_result&) noexcept;
  User_User_ModifyBaseInfo_result& operator=(const User_User_ModifyBaseInfo_result&) noexcept;
  User_User_ModifyBaseInfo_result() noexcept {
  }

  virtual ~User_User_ModifyBaseInfo_result() noexcept;
  User_ModifyBaseInfo_RecvInfo success;

  _User_User_ModifyBaseInfo_result__isset __isset;

  void __set_success(const User_ModifyBaseInfo_RecvInfo& val);

  bool operator == (const User_User_ModifyBaseInfo_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const User_User_ModifyBaseInfo_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const User_User_ModifyBaseInfo_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _User_User_ModifyBaseInfo_presult__isset {
  _User_User_ModifyBaseInfo_presult__isset() : success(false) {}
  bool success :1;
} _User_User_ModifyBaseInfo_presult__isset;

class User_User_ModifyBaseInfo_presult {
 public:


  virtual ~User_User_ModifyBaseInfo_presult() noexcept;
  User_ModifyBaseInfo_RecvInfo* success;

  _User_User_ModifyBaseInfo_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _User_User_ModifySocialInfo_args__isset {
  _User_User_ModifySocialInfo_args__isset() : info(false) {}
  bool info :1;
} _User_User_ModifySocialInfo_args__isset;

class User_User_ModifySocialInfo_args {
 public:

  User_User_ModifySocialInfo_args(const User_User_ModifySocialInfo_args&);
  User_User_ModifySocialInfo_args& operator=(const User_User_ModifySocialInfo_args&);
  User_User_ModifySocialInfo_args() noexcept {
  }

  virtual ~User_User_ModifySocialInfo_args() noexcept;
  User_ModifySocialInfo_SendInfo info;

  _User_User_ModifySocialInfo_args__isset __isset;

  void __set_info(const User_ModifySocialInfo_SendInfo& val);

  bool operator == (const User_User_ModifySocialInfo_args & rhs) const
  {
    if (!(info == rhs.info))
      return false;
    return true;
  }
  bool operator != (const User_User_ModifySocialInfo_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const User_User_ModifySocialInfo_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class User_User_ModifySocialInfo_pargs {
 public:


  virtual ~User_User_ModifySocialInfo_pargs() noexcept;
  const User_ModifySocialInfo_SendInfo* info;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _User_User_ModifySocialInfo_result__isset {
  _User_User_ModifySocialInfo_result__isset() : success(false) {}
  bool success :1;
} _User_User_ModifySocialInfo_result__isset;

class User_User_ModifySocialInfo_result {
 public:

  User_User_ModifySocialInfo_result(const User_User_ModifySocialInfo_result&) noexcept;
  User_User_ModifySocialInfo_result& operator=(const User_User_ModifySocialInfo_result&) noexcept;
  User_User_ModifySocialInfo_result() noexcept {
  }

  virtual ~User_User_ModifySocialInfo_result() noexcept;
  User_ModifySocialInfo_RecvInfo success;

  _User_User_ModifySocialInfo_result__isset __isset;

  void __set_success(const User_ModifySocialInfo_RecvInfo& val);

  bool operator == (const User_User_ModifySocialInfo_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const User_User_ModifySocialInfo_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const User_User_ModifySocialInfo_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _User_User_ModifySocialInfo_presult__isset {
  _User_User_ModifySocialInfo_presult__isset() : success(false) {}
  bool success :1;
} _User_User_ModifySocialInfo_presult__isset;

class User_User_ModifySocialInfo_presult {
 public:


  virtual ~User_User_ModifySocialInfo_presult() noexcept;
  User_ModifySocialInfo_RecvInfo* success;

  _User_User_ModifySocialInfo_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _User_User_ModifyExInfo_args__isset {
  _User_User_ModifyExInfo_args__isset() : info(false) {}
  bool info :1;
} _User_User_ModifyExInfo_args__isset;

class User_User_ModifyExInfo_args {
 public:

  User_User_ModifyExInfo_args(const User_User_ModifyExInfo_args&);
  User_User_ModifyExInfo_args& operator=(const User_User_ModifyExInfo_args&);
  User_User_ModifyExInfo_args() noexcept {
  }

  virtual ~User_User_ModifyExInfo_args() noexcept;
  User_ModifyExInfo_SendInfo info;

  _User_User_ModifyExInfo_args__isset __isset;

  void __set_info(const User_ModifyExInfo_SendInfo& val);

  bool operator == (const User_User_ModifyExInfo_args & rhs) const
  {
    if (!(info == rhs.info))
      return false;
    return true;
  }
  bool operator != (const User_User_ModifyExInfo_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const User_User_ModifyExInfo_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class User_User_ModifyExInfo_pargs {
 public:


  virtual ~User_User_ModifyExInfo_pargs() noexcept;
  const User_ModifyExInfo_SendInfo* info;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _User_User_ModifyExInfo_result__isset {
  _User_User_ModifyExInfo_result__isset() : success(false) {}
  bool success :1;
} _User_User_ModifyExInfo_result__isset;

class User_User_ModifyExInfo_result {
 public:

  User_User_ModifyExInfo_result(const User_User_ModifyExInfo_result&) noexcept;
  User_User_ModifyExInfo_result& operator=(const User_User_ModifyExInfo_result&) noexcept;
  User_User_ModifyExInfo_result() noexcept {
  }

  virtual ~User_User_ModifyExInfo_result() noexcept;
  User_ModifyExInfo_RecvInfo success;

  _User_User_ModifyExInfo_result__isset __isset;

  void __set_success(const User_ModifyExInfo_RecvInfo& val);

  bool operator == (const User_User_ModifyExInfo_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const User_User_ModifyExInfo_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const User_User_ModifyExInfo_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _User_User_ModifyExInfo_presult__isset {
  _User_User_ModifyExInfo_presult__isset() : success(false) {}
  bool success :1;
} _User_User_ModifyExInfo_presult__isset;

class User_User_ModifyExInfo_presult {
 public:


  virtual ~User_User_ModifyExInfo_presult() noexcept;
  User_ModifyExInfo_RecvInfo* success;

  _User_User_ModifyExInfo_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _User_User_follow_args__isset {
  _User_User_follow_args__isset() : info(false) {}
  bool info :1;
} _User_User_follow_args__isset;

class User_User_follow_args {
 public:

  User_User_follow_args(const User_User_follow_args&);
  User_User_follow_args& operator=(const User_User_follow_args&);
  User_User_follow_args() noexcept {
  }

  virtual ~User_User_follow_args() noexcept;
  User_follow_SendInfo info;

  _User_User_follow_args__isset __isset;

  void __set_info(const User_follow_SendInfo& val);

  bool operator == (const User_User_follow_args & rhs) const
  {
    if (!(info == rhs.info))
      return false;
    return true;
  }
  bool operator != (const User_User_follow_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const User_User_follow_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class User_User_follow_pargs {
 public:


  virtual ~User_User_follow_pargs() noexcept;
  const User_follow_SendInfo* info;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _User_User_follow_result__isset {
  _User_User_follow_result__isset() : success(false) {}
  bool success :1;
} _User_User_follow_result__isset;

class User_User_follow_result {
 public:

  User_User_follow_result(const User_User_follow_result&);
  User_User_follow_result& operator=(const User_User_follow_result&);
  User_User_follow_result() noexcept {
  }

  virtual ~User_User_follow_result() noexcept;
  User_follow_RecvInfo success;

  _User_User_follow_result__isset __isset;

  void __set_success(const User_follow_RecvInfo& val);

  bool operator == (const User_User_follow_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const User_User_follow_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const User_User_follow_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _User_User_follow_presult__isset {
  _User_User_follow_presult__isset() : success(false) {}
  bool success :1;
} _User_User_follow_presult__isset;

class User_User_follow_presult {
 public:


  virtual ~User_User_follow_presult() noexcept;
  User_follow_RecvInfo* success;

  _User_User_follow_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _User_User_followed_args__isset {
  _User_User_followed_args__isset() : info(false) {}
  bool info :1;
} _User_User_followed_args__isset;

class User_User_followed_args {
 public:

  User_User_followed_args(const User_User_followed_args&);
  User_User_followed_args& operator=(const User_User_followed_args&);
  User_User_followed_args() noexcept {
  }

  virtual ~User_User_followed_args() noexcept;
  User_followed_SendInfo info;

  _User_User_followed_args__isset __isset;

  void __set_info(const User_followed_SendInfo& val);

  bool operator == (const User_User_followed_args & rhs) const
  {
    if (!(info == rhs.info))
      return false;
    return true;
  }
  bool operator != (const User_User_followed_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const User_User_followed_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class User_User_followed_pargs {
 public:


  virtual ~User_User_followed_pargs() noexcept;
  const User_followed_SendInfo* info;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _User_User_followed_result__isset {
  _User_User_followed_result__isset() : success(false) {}
  bool success :1;
} _User_User_followed_result__isset;

class User_User_followed_result {
 public:

  User_User_followed_result(const User_User_followed_result&);
  User_User_followed_result& operator=(const User_User_followed_result&);
  User_User_followed_result() noexcept {
  }

  virtual ~User_User_followed_result() noexcept;
  User_followed_RecvInfo success;

  _User_User_followed_result__isset __isset;

  void __set_success(const User_followed_RecvInfo& val);

  bool operator == (const User_User_followed_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const User_User_followed_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const User_User_followed_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _User_User_followed_presult__isset {
  _User_User_followed_presult__isset() : success(false) {}
  bool success :1;
} _User_User_followed_presult__isset;

class User_User_followed_presult {
 public:


  virtual ~User_User_followed_presult() noexcept;
  User_followed_RecvInfo* success;

  _User_User_followed_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _User_User_friend_args__isset {
  _User_User_friend_args__isset() : info(false) {}
  bool info :1;
} _User_User_friend_args__isset;

class User_User_friend_args {
 public:

  User_User_friend_args(const User_User_friend_args&);
  User_User_friend_args& operator=(const User_User_friend_args&);
  User_User_friend_args() noexcept {
  }

  virtual ~User_User_friend_args() noexcept;
  User_friend_SendInfo info;

  _User_User_friend_args__isset __isset;

  void __set_info(const User_friend_SendInfo& val);

  bool operator == (const User_User_friend_args & rhs) const
  {
    if (!(info == rhs.info))
      return false;
    return true;
  }
  bool operator != (const User_User_friend_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const User_User_friend_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class User_User_friend_pargs {
 public:


  virtual ~User_User_friend_pargs() noexcept;
  const User_friend_SendInfo* info;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _User_User_friend_result__isset {
  _User_User_friend_result__isset() : success(false) {}
  bool success :1;
} _User_User_friend_result__isset;

class User_User_friend_result {
 public:

  User_User_friend_result(const User_User_friend_result&);
  User_User_friend_result& operator=(const User_User_friend_result&);
  User_User_friend_result() noexcept {
  }

  virtual ~User_User_friend_result() noexcept;
  User_friend_RecvInfo success;

  _User_User_friend_result__isset __isset;

  void __set_success(const User_friend_RecvInfo& val);

  bool operator == (const User_User_friend_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const User_User_friend_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const User_User_friend_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _User_User_friend_presult__isset {
  _User_User_friend_presult__isset() : success(false) {}
  bool success :1;
} _User_User_friend_presult__isset;

class User_User_friend_presult {
 public:


  virtual ~User_User_friend_presult() noexcept;
  User_friend_RecvInfo* success;

  _User_User_friend_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class UserClient : virtual public UserIf {
 public:
  UserClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  UserClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void User_GetBaseInfo(User_GetBaseInfo_RecvInfo& _return, const User_GetBaseInfo_SendInfo& info) override;
  void send_User_GetBaseInfo(const User_GetBaseInfo_SendInfo& info);
  void recv_User_GetBaseInfo(User_GetBaseInfo_RecvInfo& _return);
  void User_GetSocialInfo(User_GetSocialInfo_RecvInfo& _return, const User_GetSocialInfo_SendInfo& info) override;
  void send_User_GetSocialInfo(const User_GetSocialInfo_SendInfo& info);
  void recv_User_GetSocialInfo(User_GetSocialInfo_RecvInfo& _return);
  void User_GetExInfo(User_GetExInfo_RecvInfo& _return, const User_GetExInfo_SendInfo& info) override;
  void send_User_GetExInfo(const User_GetExInfo_SendInfo& info);
  void recv_User_GetExInfo(User_GetExInfo_RecvInfo& _return);
  void User_login_num(User_login_RecvInfo& _return, const User_login_num_SendInfo& info) override;
  void send_User_login_num(const User_login_num_SendInfo& info);
  void recv_User_login_num(User_login_RecvInfo& _return);
  void User_login_Tel(User_login_RecvInfo& _return, const User_login_Tel_SendInfo& info) override;
  void send_User_login_Tel(const User_login_Tel_SendInfo& info);
  void recv_User_login_Tel(User_login_RecvInfo& _return);
  void User_reg(User_reg_RecvInfo& _return, const User_reg_SendInfo& info) override;
  void send_User_reg(const User_reg_SendInfo& info);
  void recv_User_reg(User_reg_RecvInfo& _return);
  void User_logoff(User_logoff_RecvInfo& _return, const User_logoff_SendInfo& info) override;
  void send_User_logoff(const User_logoff_SendInfo& info);
  void recv_User_logoff(User_logoff_RecvInfo& _return);
  void User_refresh_jwt1(User_refresh_jwt1_RecvInfo& _return, const User_refresh_jwt1_SendInfo& info) override;
  void send_User_refresh_jwt1(const User_refresh_jwt1_SendInfo& info);
  void recv_User_refresh_jwt1(User_refresh_jwt1_RecvInfo& _return);
  void User_refresh_jwt2(User_refresh_jwt2_RecvInfo& _return, const User_refresh_jwt2_SendInfo& info) override;
  void send_User_refresh_jwt2(const User_refresh_jwt2_SendInfo& info);
  void recv_User_refresh_jwt2(User_refresh_jwt2_RecvInfo& _return);
  void User_ModifyBaseInfo(User_ModifyBaseInfo_RecvInfo& _return, const User_ModifyBaseInfo_SendInfo& info) override;
  void send_User_ModifyBaseInfo(const User_ModifyBaseInfo_SendInfo& info);
  void recv_User_ModifyBaseInfo(User_ModifyBaseInfo_RecvInfo& _return);
  void User_ModifySocialInfo(User_ModifySocialInfo_RecvInfo& _return, const User_ModifySocialInfo_SendInfo& info) override;
  void send_User_ModifySocialInfo(const User_ModifySocialInfo_SendInfo& info);
  void recv_User_ModifySocialInfo(User_ModifySocialInfo_RecvInfo& _return);
  void User_ModifyExInfo(User_ModifyExInfo_RecvInfo& _return, const User_ModifyExInfo_SendInfo& info) override;
  void send_User_ModifyExInfo(const User_ModifyExInfo_SendInfo& info);
  void recv_User_ModifyExInfo(User_ModifyExInfo_RecvInfo& _return);
  void User_follow(User_follow_RecvInfo& _return, const User_follow_SendInfo& info) override;
  void send_User_follow(const User_follow_SendInfo& info);
  void recv_User_follow(User_follow_RecvInfo& _return);
  void User_followed(User_followed_RecvInfo& _return, const User_followed_SendInfo& info) override;
  void send_User_followed(const User_followed_SendInfo& info);
  void recv_User_followed(User_followed_RecvInfo& _return);
  void User_friend(User_friend_RecvInfo& _return, const User_friend_SendInfo& info) override;
  void send_User_friend(const User_friend_SendInfo& info);
  void recv_User_friend(User_friend_RecvInfo& _return);
 protected:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class UserProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  ::std::shared_ptr<UserIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext) override;
 private:
  typedef  void (UserProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_User_GetBaseInfo(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_User_GetSocialInfo(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_User_GetExInfo(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_User_login_num(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_User_login_Tel(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_User_reg(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_User_logoff(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_User_refresh_jwt1(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_User_refresh_jwt2(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_User_ModifyBaseInfo(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_User_ModifySocialInfo(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_User_ModifyExInfo(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_User_follow(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_User_followed(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_User_friend(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  UserProcessor(::std::shared_ptr<UserIf> iface) :
    iface_(iface) {
    processMap_["User_GetBaseInfo"] = &UserProcessor::process_User_GetBaseInfo;
    processMap_["User_GetSocialInfo"] = &UserProcessor::process_User_GetSocialInfo;
    processMap_["User_GetExInfo"] = &UserProcessor::process_User_GetExInfo;
    processMap_["User_login_num"] = &UserProcessor::process_User_login_num;
    processMap_["User_login_Tel"] = &UserProcessor::process_User_login_Tel;
    processMap_["User_reg"] = &UserProcessor::process_User_reg;
    processMap_["User_logoff"] = &UserProcessor::process_User_logoff;
    processMap_["User_refresh_jwt1"] = &UserProcessor::process_User_refresh_jwt1;
    processMap_["User_refresh_jwt2"] = &UserProcessor::process_User_refresh_jwt2;
    processMap_["User_ModifyBaseInfo"] = &UserProcessor::process_User_ModifyBaseInfo;
    processMap_["User_ModifySocialInfo"] = &UserProcessor::process_User_ModifySocialInfo;
    processMap_["User_ModifyExInfo"] = &UserProcessor::process_User_ModifyExInfo;
    processMap_["User_follow"] = &UserProcessor::process_User_follow;
    processMap_["User_followed"] = &UserProcessor::process_User_followed;
    processMap_["User_friend"] = &UserProcessor::process_User_friend;
  }

  virtual ~UserProcessor() {}
};

class UserProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  UserProcessorFactory(const ::std::shared_ptr< UserIfFactory >& handlerFactory) noexcept :
      handlerFactory_(handlerFactory) {}

  ::std::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo) override;

 protected:
  ::std::shared_ptr< UserIfFactory > handlerFactory_;
};

class UserMultiface : virtual public UserIf {
 public:
  UserMultiface(std::vector<std::shared_ptr<UserIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~UserMultiface() {}
 protected:
  std::vector<std::shared_ptr<UserIf> > ifaces_;
  UserMultiface() {}
  void add(::std::shared_ptr<UserIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void User_GetBaseInfo(User_GetBaseInfo_RecvInfo& _return, const User_GetBaseInfo_SendInfo& info) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->User_GetBaseInfo(_return, info);
    }
    ifaces_[i]->User_GetBaseInfo(_return, info);
    return;
  }

  void User_GetSocialInfo(User_GetSocialInfo_RecvInfo& _return, const User_GetSocialInfo_SendInfo& info) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->User_GetSocialInfo(_return, info);
    }
    ifaces_[i]->User_GetSocialInfo(_return, info);
    return;
  }

  void User_GetExInfo(User_GetExInfo_RecvInfo& _return, const User_GetExInfo_SendInfo& info) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->User_GetExInfo(_return, info);
    }
    ifaces_[i]->User_GetExInfo(_return, info);
    return;
  }

  void User_login_num(User_login_RecvInfo& _return, const User_login_num_SendInfo& info) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->User_login_num(_return, info);
    }
    ifaces_[i]->User_login_num(_return, info);
    return;
  }

  void User_login_Tel(User_login_RecvInfo& _return, const User_login_Tel_SendInfo& info) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->User_login_Tel(_return, info);
    }
    ifaces_[i]->User_login_Tel(_return, info);
    return;
  }

  void User_reg(User_reg_RecvInfo& _return, const User_reg_SendInfo& info) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->User_reg(_return, info);
    }
    ifaces_[i]->User_reg(_return, info);
    return;
  }

  void User_logoff(User_logoff_RecvInfo& _return, const User_logoff_SendInfo& info) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->User_logoff(_return, info);
    }
    ifaces_[i]->User_logoff(_return, info);
    return;
  }

  void User_refresh_jwt1(User_refresh_jwt1_RecvInfo& _return, const User_refresh_jwt1_SendInfo& info) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->User_refresh_jwt1(_return, info);
    }
    ifaces_[i]->User_refresh_jwt1(_return, info);
    return;
  }

  void User_refresh_jwt2(User_refresh_jwt2_RecvInfo& _return, const User_refresh_jwt2_SendInfo& info) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->User_refresh_jwt2(_return, info);
    }
    ifaces_[i]->User_refresh_jwt2(_return, info);
    return;
  }

  void User_ModifyBaseInfo(User_ModifyBaseInfo_RecvInfo& _return, const User_ModifyBaseInfo_SendInfo& info) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->User_ModifyBaseInfo(_return, info);
    }
    ifaces_[i]->User_ModifyBaseInfo(_return, info);
    return;
  }

  void User_ModifySocialInfo(User_ModifySocialInfo_RecvInfo& _return, const User_ModifySocialInfo_SendInfo& info) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->User_ModifySocialInfo(_return, info);
    }
    ifaces_[i]->User_ModifySocialInfo(_return, info);
    return;
  }

  void User_ModifyExInfo(User_ModifyExInfo_RecvInfo& _return, const User_ModifyExInfo_SendInfo& info) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->User_ModifyExInfo(_return, info);
    }
    ifaces_[i]->User_ModifyExInfo(_return, info);
    return;
  }

  void User_follow(User_follow_RecvInfo& _return, const User_follow_SendInfo& info) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->User_follow(_return, info);
    }
    ifaces_[i]->User_follow(_return, info);
    return;
  }

  void User_followed(User_followed_RecvInfo& _return, const User_followed_SendInfo& info) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->User_followed(_return, info);
    }
    ifaces_[i]->User_followed(_return, info);
    return;
  }

  void User_friend(User_friend_RecvInfo& _return, const User_friend_SendInfo& info) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->User_friend(_return, info);
    }
    ifaces_[i]->User_friend(_return, info);
    return;
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class UserConcurrentClient : virtual public UserIf {
 public:
  UserConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot, std::shared_ptr< ::apache::thrift::async::TConcurrentClientSyncInfo> sync) : sync_(sync)
{
    setProtocol(prot);
  }
  UserConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot, std::shared_ptr< ::apache::thrift::async::TConcurrentClientSyncInfo> sync) : sync_(sync)
{
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void User_GetBaseInfo(User_GetBaseInfo_RecvInfo& _return, const User_GetBaseInfo_SendInfo& info) override;
  int32_t send_User_GetBaseInfo(const User_GetBaseInfo_SendInfo& info);
  void recv_User_GetBaseInfo(User_GetBaseInfo_RecvInfo& _return, const int32_t seqid);
  void User_GetSocialInfo(User_GetSocialInfo_RecvInfo& _return, const User_GetSocialInfo_SendInfo& info) override;
  int32_t send_User_GetSocialInfo(const User_GetSocialInfo_SendInfo& info);
  void recv_User_GetSocialInfo(User_GetSocialInfo_RecvInfo& _return, const int32_t seqid);
  void User_GetExInfo(User_GetExInfo_RecvInfo& _return, const User_GetExInfo_SendInfo& info) override;
  int32_t send_User_GetExInfo(const User_GetExInfo_SendInfo& info);
  void recv_User_GetExInfo(User_GetExInfo_RecvInfo& _return, const int32_t seqid);
  void User_login_num(User_login_RecvInfo& _return, const User_login_num_SendInfo& info) override;
  int32_t send_User_login_num(const User_login_num_SendInfo& info);
  void recv_User_login_num(User_login_RecvInfo& _return, const int32_t seqid);
  void User_login_Tel(User_login_RecvInfo& _return, const User_login_Tel_SendInfo& info) override;
  int32_t send_User_login_Tel(const User_login_Tel_SendInfo& info);
  void recv_User_login_Tel(User_login_RecvInfo& _return, const int32_t seqid);
  void User_reg(User_reg_RecvInfo& _return, const User_reg_SendInfo& info) override;
  int32_t send_User_reg(const User_reg_SendInfo& info);
  void recv_User_reg(User_reg_RecvInfo& _return, const int32_t seqid);
  void User_logoff(User_logoff_RecvInfo& _return, const User_logoff_SendInfo& info) override;
  int32_t send_User_logoff(const User_logoff_SendInfo& info);
  void recv_User_logoff(User_logoff_RecvInfo& _return, const int32_t seqid);
  void User_refresh_jwt1(User_refresh_jwt1_RecvInfo& _return, const User_refresh_jwt1_SendInfo& info) override;
  int32_t send_User_refresh_jwt1(const User_refresh_jwt1_SendInfo& info);
  void recv_User_refresh_jwt1(User_refresh_jwt1_RecvInfo& _return, const int32_t seqid);
  void User_refresh_jwt2(User_refresh_jwt2_RecvInfo& _return, const User_refresh_jwt2_SendInfo& info) override;
  int32_t send_User_refresh_jwt2(const User_refresh_jwt2_SendInfo& info);
  void recv_User_refresh_jwt2(User_refresh_jwt2_RecvInfo& _return, const int32_t seqid);
  void User_ModifyBaseInfo(User_ModifyBaseInfo_RecvInfo& _return, const User_ModifyBaseInfo_SendInfo& info) override;
  int32_t send_User_ModifyBaseInfo(const User_ModifyBaseInfo_SendInfo& info);
  void recv_User_ModifyBaseInfo(User_ModifyBaseInfo_RecvInfo& _return, const int32_t seqid);
  void User_ModifySocialInfo(User_ModifySocialInfo_RecvInfo& _return, const User_ModifySocialInfo_SendInfo& info) override;
  int32_t send_User_ModifySocialInfo(const User_ModifySocialInfo_SendInfo& info);
  void recv_User_ModifySocialInfo(User_ModifySocialInfo_RecvInfo& _return, const int32_t seqid);
  void User_ModifyExInfo(User_ModifyExInfo_RecvInfo& _return, const User_ModifyExInfo_SendInfo& info) override;
  int32_t send_User_ModifyExInfo(const User_ModifyExInfo_SendInfo& info);
  void recv_User_ModifyExInfo(User_ModifyExInfo_RecvInfo& _return, const int32_t seqid);
  void User_follow(User_follow_RecvInfo& _return, const User_follow_SendInfo& info) override;
  int32_t send_User_follow(const User_follow_SendInfo& info);
  void recv_User_follow(User_follow_RecvInfo& _return, const int32_t seqid);
  void User_followed(User_followed_RecvInfo& _return, const User_followed_SendInfo& info) override;
  int32_t send_User_followed(const User_followed_SendInfo& info);
  void recv_User_followed(User_followed_RecvInfo& _return, const int32_t seqid);
  void User_friend(User_friend_RecvInfo& _return, const User_friend_SendInfo& info) override;
  int32_t send_User_friend(const User_friend_SendInfo& info);
  void recv_User_friend(User_friend_RecvInfo& _return, const int32_t seqid);
 protected:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  std::shared_ptr< ::apache::thrift::async::TConcurrentClientSyncInfo> sync_;
};

#ifdef _MSC_VER
  #pragma warning( pop )
#endif



#endif
