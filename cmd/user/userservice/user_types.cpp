/**
 * Autogenerated by Thrift Compiler (0.19.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "user_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>




User_GetBaseInfo_SendInfo::~User_GetBaseInfo_SendInfo() noexcept {
}


void User_GetBaseInfo_SendInfo::__set_type(const int32_t val) {
  this->type = val;
}

void User_GetBaseInfo_SendInfo::__set_jwt_token(const std::string& val) {
  this->jwt_token = val;
}

void User_GetBaseInfo_SendInfo::__set_sendtime(const int32_t val) {
  this->sendtime = val;
}

void User_GetBaseInfo_SendInfo::__set_Aim_usernum(const std::string& val) {
  this->Aim_usernum = val;
}

void User_GetBaseInfo_SendInfo::__set_info(const std::string& val) {
  this->info = val;
}
std::ostream& operator<<(std::ostream& out, const User_GetBaseInfo_SendInfo& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t User_GetBaseInfo_SendInfo::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->type);
          this->__isset.type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->jwt_token);
          this->__isset.jwt_token = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->sendtime);
          this->__isset.sendtime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Aim_usernum);
          this->__isset.Aim_usernum = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->info);
          this->__isset.info = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t User_GetBaseInfo_SendInfo::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("User_GetBaseInfo_SendInfo");

  xfer += oprot->writeFieldBegin("type", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->type);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("jwt_token", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->jwt_token);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("sendtime", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->sendtime);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Aim_usernum", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->Aim_usernum);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("info", ::apache::thrift::protocol::T_STRING, 5);
  xfer += oprot->writeString(this->info);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(User_GetBaseInfo_SendInfo &a, User_GetBaseInfo_SendInfo &b) {
  using ::std::swap;
  swap(a.type, b.type);
  swap(a.jwt_token, b.jwt_token);
  swap(a.sendtime, b.sendtime);
  swap(a.Aim_usernum, b.Aim_usernum);
  swap(a.info, b.info);
  swap(a.__isset, b.__isset);
}

User_GetBaseInfo_SendInfo::User_GetBaseInfo_SendInfo(const User_GetBaseInfo_SendInfo& other0) {
  type = other0.type;
  jwt_token = other0.jwt_token;
  sendtime = other0.sendtime;
  Aim_usernum = other0.Aim_usernum;
  info = other0.info;
  __isset = other0.__isset;
}
User_GetBaseInfo_SendInfo& User_GetBaseInfo_SendInfo::operator=(const User_GetBaseInfo_SendInfo& other1) {
  type = other1.type;
  jwt_token = other1.jwt_token;
  sendtime = other1.sendtime;
  Aim_usernum = other1.Aim_usernum;
  info = other1.info;
  __isset = other1.__isset;
  return *this;
}
void User_GetBaseInfo_SendInfo::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "User_GetBaseInfo_SendInfo(";
  out << "type=" << to_string(type);
  out << ", " << "jwt_token=" << to_string(jwt_token);
  out << ", " << "sendtime=" << to_string(sendtime);
  out << ", " << "Aim_usernum=" << to_string(Aim_usernum);
  out << ", " << "info=" << to_string(info);
  out << ")";
}


User_GetBaseInfo_RecvInfo::~User_GetBaseInfo_RecvInfo() noexcept {
}


void User_GetBaseInfo_RecvInfo::__set_type(const int32_t val) {
  this->type = val;
}

void User_GetBaseInfo_RecvInfo::__set_sendtime(const int32_t val) {
  this->sendtime = val;
}

void User_GetBaseInfo_RecvInfo::__set_status(const int32_t val) {
  this->status = val;
}

void User_GetBaseInfo_RecvInfo::__set_info(const std::string& val) {
  this->info = val;
}
std::ostream& operator<<(std::ostream& out, const User_GetBaseInfo_RecvInfo& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t User_GetBaseInfo_RecvInfo::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->type);
          this->__isset.type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->sendtime);
          this->__isset.sendtime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->status);
          this->__isset.status = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->info);
          this->__isset.info = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t User_GetBaseInfo_RecvInfo::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("User_GetBaseInfo_RecvInfo");

  xfer += oprot->writeFieldBegin("type", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->type);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("sendtime", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->sendtime);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("status", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->status);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("info", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->info);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(User_GetBaseInfo_RecvInfo &a, User_GetBaseInfo_RecvInfo &b) {
  using ::std::swap;
  swap(a.type, b.type);
  swap(a.sendtime, b.sendtime);
  swap(a.status, b.status);
  swap(a.info, b.info);
  swap(a.__isset, b.__isset);
}

User_GetBaseInfo_RecvInfo::User_GetBaseInfo_RecvInfo(const User_GetBaseInfo_RecvInfo& other2) {
  type = other2.type;
  sendtime = other2.sendtime;
  status = other2.status;
  info = other2.info;
  __isset = other2.__isset;
}
User_GetBaseInfo_RecvInfo& User_GetBaseInfo_RecvInfo::operator=(const User_GetBaseInfo_RecvInfo& other3) {
  type = other3.type;
  sendtime = other3.sendtime;
  status = other3.status;
  info = other3.info;
  __isset = other3.__isset;
  return *this;
}
void User_GetBaseInfo_RecvInfo::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "User_GetBaseInfo_RecvInfo(";
  out << "type=" << to_string(type);
  out << ", " << "sendtime=" << to_string(sendtime);
  out << ", " << "status=" << to_string(status);
  out << ", " << "info=" << to_string(info);
  out << ")";
}


User_GetSocialInfo_SendInfo::~User_GetSocialInfo_SendInfo() noexcept {
}


void User_GetSocialInfo_SendInfo::__set_type(const int32_t val) {
  this->type = val;
}

void User_GetSocialInfo_SendInfo::__set_jwt_token(const std::string& val) {
  this->jwt_token = val;
}

void User_GetSocialInfo_SendInfo::__set_sendtime(const int32_t val) {
  this->sendtime = val;
}

void User_GetSocialInfo_SendInfo::__set_Aim_usernum(const std::string& val) {
  this->Aim_usernum = val;
}

void User_GetSocialInfo_SendInfo::__set_info(const std::string& val) {
  this->info = val;
}
std::ostream& operator<<(std::ostream& out, const User_GetSocialInfo_SendInfo& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t User_GetSocialInfo_SendInfo::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->type);
          this->__isset.type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->jwt_token);
          this->__isset.jwt_token = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->sendtime);
          this->__isset.sendtime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Aim_usernum);
          this->__isset.Aim_usernum = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->info);
          this->__isset.info = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t User_GetSocialInfo_SendInfo::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("User_GetSocialInfo_SendInfo");

  xfer += oprot->writeFieldBegin("type", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->type);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("jwt_token", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->jwt_token);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("sendtime", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->sendtime);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Aim_usernum", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->Aim_usernum);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("info", ::apache::thrift::protocol::T_STRING, 5);
  xfer += oprot->writeString(this->info);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(User_GetSocialInfo_SendInfo &a, User_GetSocialInfo_SendInfo &b) {
  using ::std::swap;
  swap(a.type, b.type);
  swap(a.jwt_token, b.jwt_token);
  swap(a.sendtime, b.sendtime);
  swap(a.Aim_usernum, b.Aim_usernum);
  swap(a.info, b.info);
  swap(a.__isset, b.__isset);
}

User_GetSocialInfo_SendInfo::User_GetSocialInfo_SendInfo(const User_GetSocialInfo_SendInfo& other4) {
  type = other4.type;
  jwt_token = other4.jwt_token;
  sendtime = other4.sendtime;
  Aim_usernum = other4.Aim_usernum;
  info = other4.info;
  __isset = other4.__isset;
}
User_GetSocialInfo_SendInfo& User_GetSocialInfo_SendInfo::operator=(const User_GetSocialInfo_SendInfo& other5) {
  type = other5.type;
  jwt_token = other5.jwt_token;
  sendtime = other5.sendtime;
  Aim_usernum = other5.Aim_usernum;
  info = other5.info;
  __isset = other5.__isset;
  return *this;
}
void User_GetSocialInfo_SendInfo::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "User_GetSocialInfo_SendInfo(";
  out << "type=" << to_string(type);
  out << ", " << "jwt_token=" << to_string(jwt_token);
  out << ", " << "sendtime=" << to_string(sendtime);
  out << ", " << "Aim_usernum=" << to_string(Aim_usernum);
  out << ", " << "info=" << to_string(info);
  out << ")";
}


User_GetSocialInfo_RecvInfo::~User_GetSocialInfo_RecvInfo() noexcept {
}


void User_GetSocialInfo_RecvInfo::__set_type(const int32_t val) {
  this->type = val;
}

void User_GetSocialInfo_RecvInfo::__set_sendtime(const int32_t val) {
  this->sendtime = val;
}

void User_GetSocialInfo_RecvInfo::__set_status(const int32_t val) {
  this->status = val;
}

void User_GetSocialInfo_RecvInfo::__set_info(const std::string& val) {
  this->info = val;
}
std::ostream& operator<<(std::ostream& out, const User_GetSocialInfo_RecvInfo& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t User_GetSocialInfo_RecvInfo::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->type);
          this->__isset.type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->sendtime);
          this->__isset.sendtime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->status);
          this->__isset.status = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->info);
          this->__isset.info = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t User_GetSocialInfo_RecvInfo::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("User_GetSocialInfo_RecvInfo");

  xfer += oprot->writeFieldBegin("type", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->type);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("sendtime", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->sendtime);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("status", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->status);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("info", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->info);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(User_GetSocialInfo_RecvInfo &a, User_GetSocialInfo_RecvInfo &b) {
  using ::std::swap;
  swap(a.type, b.type);
  swap(a.sendtime, b.sendtime);
  swap(a.status, b.status);
  swap(a.info, b.info);
  swap(a.__isset, b.__isset);
}

User_GetSocialInfo_RecvInfo::User_GetSocialInfo_RecvInfo(const User_GetSocialInfo_RecvInfo& other6) {
  type = other6.type;
  sendtime = other6.sendtime;
  status = other6.status;
  info = other6.info;
  __isset = other6.__isset;
}
User_GetSocialInfo_RecvInfo& User_GetSocialInfo_RecvInfo::operator=(const User_GetSocialInfo_RecvInfo& other7) {
  type = other7.type;
  sendtime = other7.sendtime;
  status = other7.status;
  info = other7.info;
  __isset = other7.__isset;
  return *this;
}
void User_GetSocialInfo_RecvInfo::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "User_GetSocialInfo_RecvInfo(";
  out << "type=" << to_string(type);
  out << ", " << "sendtime=" << to_string(sendtime);
  out << ", " << "status=" << to_string(status);
  out << ", " << "info=" << to_string(info);
  out << ")";
}


User_GetExInfo_SendInfo::~User_GetExInfo_SendInfo() noexcept {
}


void User_GetExInfo_SendInfo::__set_type(const int32_t val) {
  this->type = val;
}

void User_GetExInfo_SendInfo::__set_jwt_token(const std::string& val) {
  this->jwt_token = val;
}

void User_GetExInfo_SendInfo::__set_sendtime(const int32_t val) {
  this->sendtime = val;
}

void User_GetExInfo_SendInfo::__set_Aim_usernum(const std::string& val) {
  this->Aim_usernum = val;
}

void User_GetExInfo_SendInfo::__set_info(const std::string& val) {
  this->info = val;
}
std::ostream& operator<<(std::ostream& out, const User_GetExInfo_SendInfo& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t User_GetExInfo_SendInfo::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->type);
          this->__isset.type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->jwt_token);
          this->__isset.jwt_token = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->sendtime);
          this->__isset.sendtime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Aim_usernum);
          this->__isset.Aim_usernum = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->info);
          this->__isset.info = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t User_GetExInfo_SendInfo::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("User_GetExInfo_SendInfo");

  xfer += oprot->writeFieldBegin("type", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->type);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("jwt_token", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->jwt_token);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("sendtime", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->sendtime);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Aim_usernum", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->Aim_usernum);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("info", ::apache::thrift::protocol::T_STRING, 5);
  xfer += oprot->writeString(this->info);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(User_GetExInfo_SendInfo &a, User_GetExInfo_SendInfo &b) {
  using ::std::swap;
  swap(a.type, b.type);
  swap(a.jwt_token, b.jwt_token);
  swap(a.sendtime, b.sendtime);
  swap(a.Aim_usernum, b.Aim_usernum);
  swap(a.info, b.info);
  swap(a.__isset, b.__isset);
}

User_GetExInfo_SendInfo::User_GetExInfo_SendInfo(const User_GetExInfo_SendInfo& other8) {
  type = other8.type;
  jwt_token = other8.jwt_token;
  sendtime = other8.sendtime;
  Aim_usernum = other8.Aim_usernum;
  info = other8.info;
  __isset = other8.__isset;
}
User_GetExInfo_SendInfo& User_GetExInfo_SendInfo::operator=(const User_GetExInfo_SendInfo& other9) {
  type = other9.type;
  jwt_token = other9.jwt_token;
  sendtime = other9.sendtime;
  Aim_usernum = other9.Aim_usernum;
  info = other9.info;
  __isset = other9.__isset;
  return *this;
}
void User_GetExInfo_SendInfo::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "User_GetExInfo_SendInfo(";
  out << "type=" << to_string(type);
  out << ", " << "jwt_token=" << to_string(jwt_token);
  out << ", " << "sendtime=" << to_string(sendtime);
  out << ", " << "Aim_usernum=" << to_string(Aim_usernum);
  out << ", " << "info=" << to_string(info);
  out << ")";
}


User_GetExInfo_RecvInfo::~User_GetExInfo_RecvInfo() noexcept {
}


void User_GetExInfo_RecvInfo::__set_type(const int32_t val) {
  this->type = val;
}

void User_GetExInfo_RecvInfo::__set_sendtime(const int32_t val) {
  this->sendtime = val;
}

void User_GetExInfo_RecvInfo::__set_status(const int32_t val) {
  this->status = val;
}

void User_GetExInfo_RecvInfo::__set_info(const std::string& val) {
  this->info = val;
}
std::ostream& operator<<(std::ostream& out, const User_GetExInfo_RecvInfo& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t User_GetExInfo_RecvInfo::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->type);
          this->__isset.type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->sendtime);
          this->__isset.sendtime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->status);
          this->__isset.status = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->info);
          this->__isset.info = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t User_GetExInfo_RecvInfo::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("User_GetExInfo_RecvInfo");

  xfer += oprot->writeFieldBegin("type", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->type);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("sendtime", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->sendtime);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("status", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->status);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("info", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->info);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(User_GetExInfo_RecvInfo &a, User_GetExInfo_RecvInfo &b) {
  using ::std::swap;
  swap(a.type, b.type);
  swap(a.sendtime, b.sendtime);
  swap(a.status, b.status);
  swap(a.info, b.info);
  swap(a.__isset, b.__isset);
}

User_GetExInfo_RecvInfo::User_GetExInfo_RecvInfo(const User_GetExInfo_RecvInfo& other10) {
  type = other10.type;
  sendtime = other10.sendtime;
  status = other10.status;
  info = other10.info;
  __isset = other10.__isset;
}
User_GetExInfo_RecvInfo& User_GetExInfo_RecvInfo::operator=(const User_GetExInfo_RecvInfo& other11) {
  type = other11.type;
  sendtime = other11.sendtime;
  status = other11.status;
  info = other11.info;
  __isset = other11.__isset;
  return *this;
}
void User_GetExInfo_RecvInfo::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "User_GetExInfo_RecvInfo(";
  out << "type=" << to_string(type);
  out << ", " << "sendtime=" << to_string(sendtime);
  out << ", " << "status=" << to_string(status);
  out << ", " << "info=" << to_string(info);
  out << ")";
}


User_reg_SendInfo::~User_reg_SendInfo() noexcept {
}


void User_reg_SendInfo::__set_type(const int32_t val) {
  this->type = val;
}

void User_reg_SendInfo::__set_sendtime(const int32_t val) {
  this->sendtime = val;
}

void User_reg_SendInfo::__set_tel(const std::string& val) {
  this->tel = val;
}

void User_reg_SendInfo::__set_usernum(const std::string& val) {
  this->usernum = val;
}

void User_reg_SendInfo::__set_passwd(const std::string& val) {
  this->passwd = val;
}
std::ostream& operator<<(std::ostream& out, const User_reg_SendInfo& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t User_reg_SendInfo::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->type);
          this->__isset.type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->sendtime);
          this->__isset.sendtime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->tel);
          this->__isset.tel = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->usernum);
          this->__isset.usernum = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->passwd);
          this->__isset.passwd = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t User_reg_SendInfo::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("User_reg_SendInfo");

  xfer += oprot->writeFieldBegin("type", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->type);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("sendtime", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->sendtime);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("tel", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->tel);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("usernum", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->usernum);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("passwd", ::apache::thrift::protocol::T_STRING, 5);
  xfer += oprot->writeString(this->passwd);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(User_reg_SendInfo &a, User_reg_SendInfo &b) {
  using ::std::swap;
  swap(a.type, b.type);
  swap(a.sendtime, b.sendtime);
  swap(a.tel, b.tel);
  swap(a.usernum, b.usernum);
  swap(a.passwd, b.passwd);
  swap(a.__isset, b.__isset);
}

User_reg_SendInfo::User_reg_SendInfo(const User_reg_SendInfo& other12) {
  type = other12.type;
  sendtime = other12.sendtime;
  tel = other12.tel;
  usernum = other12.usernum;
  passwd = other12.passwd;
  __isset = other12.__isset;
}
User_reg_SendInfo& User_reg_SendInfo::operator=(const User_reg_SendInfo& other13) {
  type = other13.type;
  sendtime = other13.sendtime;
  tel = other13.tel;
  usernum = other13.usernum;
  passwd = other13.passwd;
  __isset = other13.__isset;
  return *this;
}
void User_reg_SendInfo::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "User_reg_SendInfo(";
  out << "type=" << to_string(type);
  out << ", " << "sendtime=" << to_string(sendtime);
  out << ", " << "tel=" << to_string(tel);
  out << ", " << "usernum=" << to_string(usernum);
  out << ", " << "passwd=" << to_string(passwd);
  out << ")";
}


User_reg_RecvInfo::~User_reg_RecvInfo() noexcept {
}


void User_reg_RecvInfo::__set_type(const int32_t val) {
  this->type = val;
}

void User_reg_RecvInfo::__set_sendtime(const int32_t val) {
  this->sendtime = val;
}

void User_reg_RecvInfo::__set_status(const int32_t val) {
  this->status = val;
}
std::ostream& operator<<(std::ostream& out, const User_reg_RecvInfo& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t User_reg_RecvInfo::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->type);
          this->__isset.type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->sendtime);
          this->__isset.sendtime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->status);
          this->__isset.status = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t User_reg_RecvInfo::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("User_reg_RecvInfo");

  xfer += oprot->writeFieldBegin("type", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->type);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("sendtime", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->sendtime);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("status", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->status);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(User_reg_RecvInfo &a, User_reg_RecvInfo &b) {
  using ::std::swap;
  swap(a.type, b.type);
  swap(a.sendtime, b.sendtime);
  swap(a.status, b.status);
  swap(a.__isset, b.__isset);
}

User_reg_RecvInfo::User_reg_RecvInfo(const User_reg_RecvInfo& other14) noexcept {
  type = other14.type;
  sendtime = other14.sendtime;
  status = other14.status;
  __isset = other14.__isset;
}
User_reg_RecvInfo& User_reg_RecvInfo::operator=(const User_reg_RecvInfo& other15) noexcept {
  type = other15.type;
  sendtime = other15.sendtime;
  status = other15.status;
  __isset = other15.__isset;
  return *this;
}
void User_reg_RecvInfo::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "User_reg_RecvInfo(";
  out << "type=" << to_string(type);
  out << ", " << "sendtime=" << to_string(sendtime);
  out << ", " << "status=" << to_string(status);
  out << ")";
}


User_login_Tel_SendInfo::~User_login_Tel_SendInfo() noexcept {
}


void User_login_Tel_SendInfo::__set_type(const int32_t val) {
  this->type = val;
}

void User_login_Tel_SendInfo::__set_sendtime(const int32_t val) {
  this->sendtime = val;
}

void User_login_Tel_SendInfo::__set_tel(const std::string& val) {
  this->tel = val;
}

void User_login_Tel_SendInfo::__set_passwd(const std::string& val) {
  this->passwd = val;
}
std::ostream& operator<<(std::ostream& out, const User_login_Tel_SendInfo& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t User_login_Tel_SendInfo::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->type);
          this->__isset.type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->sendtime);
          this->__isset.sendtime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->tel);
          this->__isset.tel = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->passwd);
          this->__isset.passwd = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t User_login_Tel_SendInfo::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("User_login_Tel_SendInfo");

  xfer += oprot->writeFieldBegin("type", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->type);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("sendtime", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->sendtime);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("tel", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->tel);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("passwd", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->passwd);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(User_login_Tel_SendInfo &a, User_login_Tel_SendInfo &b) {
  using ::std::swap;
  swap(a.type, b.type);
  swap(a.sendtime, b.sendtime);
  swap(a.tel, b.tel);
  swap(a.passwd, b.passwd);
  swap(a.__isset, b.__isset);
}

User_login_Tel_SendInfo::User_login_Tel_SendInfo(const User_login_Tel_SendInfo& other16) {
  type = other16.type;
  sendtime = other16.sendtime;
  tel = other16.tel;
  passwd = other16.passwd;
  __isset = other16.__isset;
}
User_login_Tel_SendInfo& User_login_Tel_SendInfo::operator=(const User_login_Tel_SendInfo& other17) {
  type = other17.type;
  sendtime = other17.sendtime;
  tel = other17.tel;
  passwd = other17.passwd;
  __isset = other17.__isset;
  return *this;
}
void User_login_Tel_SendInfo::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "User_login_Tel_SendInfo(";
  out << "type=" << to_string(type);
  out << ", " << "sendtime=" << to_string(sendtime);
  out << ", " << "tel=" << to_string(tel);
  out << ", " << "passwd=" << to_string(passwd);
  out << ")";
}


User_login_num_SendInfo::~User_login_num_SendInfo() noexcept {
}


void User_login_num_SendInfo::__set_type(const int32_t val) {
  this->type = val;
}

void User_login_num_SendInfo::__set_sendtime(const int32_t val) {
  this->sendtime = val;
}

void User_login_num_SendInfo::__set_usernum(const std::string& val) {
  this->usernum = val;
}

void User_login_num_SendInfo::__set_passwd(const std::string& val) {
  this->passwd = val;
}
std::ostream& operator<<(std::ostream& out, const User_login_num_SendInfo& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t User_login_num_SendInfo::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->type);
          this->__isset.type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->sendtime);
          this->__isset.sendtime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->usernum);
          this->__isset.usernum = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->passwd);
          this->__isset.passwd = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t User_login_num_SendInfo::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("User_login_num_SendInfo");

  xfer += oprot->writeFieldBegin("type", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->type);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("sendtime", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->sendtime);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("usernum", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->usernum);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("passwd", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->passwd);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(User_login_num_SendInfo &a, User_login_num_SendInfo &b) {
  using ::std::swap;
  swap(a.type, b.type);
  swap(a.sendtime, b.sendtime);
  swap(a.usernum, b.usernum);
  swap(a.passwd, b.passwd);
  swap(a.__isset, b.__isset);
}

User_login_num_SendInfo::User_login_num_SendInfo(const User_login_num_SendInfo& other18) {
  type = other18.type;
  sendtime = other18.sendtime;
  usernum = other18.usernum;
  passwd = other18.passwd;
  __isset = other18.__isset;
}
User_login_num_SendInfo& User_login_num_SendInfo::operator=(const User_login_num_SendInfo& other19) {
  type = other19.type;
  sendtime = other19.sendtime;
  usernum = other19.usernum;
  passwd = other19.passwd;
  __isset = other19.__isset;
  return *this;
}
void User_login_num_SendInfo::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "User_login_num_SendInfo(";
  out << "type=" << to_string(type);
  out << ", " << "sendtime=" << to_string(sendtime);
  out << ", " << "usernum=" << to_string(usernum);
  out << ", " << "passwd=" << to_string(passwd);
  out << ")";
}


User_login_RecvInfo::~User_login_RecvInfo() noexcept {
}


void User_login_RecvInfo::__set_type(const int32_t val) {
  this->type = val;
}

void User_login_RecvInfo::__set_sendtime(const int32_t val) {
  this->sendtime = val;
}

void User_login_RecvInfo::__set_status(const int32_t val) {
  this->status = val;
}

void User_login_RecvInfo::__set_jwt_token(const std::string& val) {
  this->jwt_token = val;
}

void User_login_RecvInfo::__set_refresh_jwt_token(const std::string& val) {
  this->refresh_jwt_token = val;
}
std::ostream& operator<<(std::ostream& out, const User_login_RecvInfo& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t User_login_RecvInfo::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->type);
          this->__isset.type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->sendtime);
          this->__isset.sendtime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->status);
          this->__isset.status = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->jwt_token);
          this->__isset.jwt_token = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->refresh_jwt_token);
          this->__isset.refresh_jwt_token = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t User_login_RecvInfo::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("User_login_RecvInfo");

  xfer += oprot->writeFieldBegin("type", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->type);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("sendtime", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->sendtime);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("status", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->status);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("jwt_token", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->jwt_token);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("refresh_jwt_token", ::apache::thrift::protocol::T_STRING, 5);
  xfer += oprot->writeString(this->refresh_jwt_token);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(User_login_RecvInfo &a, User_login_RecvInfo &b) {
  using ::std::swap;
  swap(a.type, b.type);
  swap(a.sendtime, b.sendtime);
  swap(a.status, b.status);
  swap(a.jwt_token, b.jwt_token);
  swap(a.refresh_jwt_token, b.refresh_jwt_token);
  swap(a.__isset, b.__isset);
}

User_login_RecvInfo::User_login_RecvInfo(const User_login_RecvInfo& other20) {
  type = other20.type;
  sendtime = other20.sendtime;
  status = other20.status;
  jwt_token = other20.jwt_token;
  refresh_jwt_token = other20.refresh_jwt_token;
  __isset = other20.__isset;
}
User_login_RecvInfo& User_login_RecvInfo::operator=(const User_login_RecvInfo& other21) {
  type = other21.type;
  sendtime = other21.sendtime;
  status = other21.status;
  jwt_token = other21.jwt_token;
  refresh_jwt_token = other21.refresh_jwt_token;
  __isset = other21.__isset;
  return *this;
}
void User_login_RecvInfo::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "User_login_RecvInfo(";
  out << "type=" << to_string(type);
  out << ", " << "sendtime=" << to_string(sendtime);
  out << ", " << "status=" << to_string(status);
  out << ", " << "jwt_token=" << to_string(jwt_token);
  out << ", " << "refresh_jwt_token=" << to_string(refresh_jwt_token);
  out << ")";
}


User_logoff_SendInfo::~User_logoff_SendInfo() noexcept {
}


void User_logoff_SendInfo::__set_type(const int32_t val) {
  this->type = val;
}

void User_logoff_SendInfo::__set_jwt_token(const std::string& val) {
  this->jwt_token = val;
}

void User_logoff_SendInfo::__set_sendtime(const int32_t val) {
  this->sendtime = val;
}
std::ostream& operator<<(std::ostream& out, const User_logoff_SendInfo& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t User_logoff_SendInfo::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->type);
          this->__isset.type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->jwt_token);
          this->__isset.jwt_token = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->sendtime);
          this->__isset.sendtime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t User_logoff_SendInfo::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("User_logoff_SendInfo");

  xfer += oprot->writeFieldBegin("type", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->type);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("jwt_token", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->jwt_token);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("sendtime", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->sendtime);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(User_logoff_SendInfo &a, User_logoff_SendInfo &b) {
  using ::std::swap;
  swap(a.type, b.type);
  swap(a.jwt_token, b.jwt_token);
  swap(a.sendtime, b.sendtime);
  swap(a.__isset, b.__isset);
}

User_logoff_SendInfo::User_logoff_SendInfo(const User_logoff_SendInfo& other22) {
  type = other22.type;
  jwt_token = other22.jwt_token;
  sendtime = other22.sendtime;
  __isset = other22.__isset;
}
User_logoff_SendInfo& User_logoff_SendInfo::operator=(const User_logoff_SendInfo& other23) {
  type = other23.type;
  jwt_token = other23.jwt_token;
  sendtime = other23.sendtime;
  __isset = other23.__isset;
  return *this;
}
void User_logoff_SendInfo::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "User_logoff_SendInfo(";
  out << "type=" << to_string(type);
  out << ", " << "jwt_token=" << to_string(jwt_token);
  out << ", " << "sendtime=" << to_string(sendtime);
  out << ")";
}


User_logoff_RecvInfo::~User_logoff_RecvInfo() noexcept {
}


void User_logoff_RecvInfo::__set_type(const int32_t val) {
  this->type = val;
}

void User_logoff_RecvInfo::__set_sendtime(const int32_t val) {
  this->sendtime = val;
}

void User_logoff_RecvInfo::__set_status(const int32_t val) {
  this->status = val;
}
std::ostream& operator<<(std::ostream& out, const User_logoff_RecvInfo& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t User_logoff_RecvInfo::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->type);
          this->__isset.type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->sendtime);
          this->__isset.sendtime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->status);
          this->__isset.status = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t User_logoff_RecvInfo::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("User_logoff_RecvInfo");

  xfer += oprot->writeFieldBegin("type", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->type);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("sendtime", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->sendtime);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("status", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->status);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(User_logoff_RecvInfo &a, User_logoff_RecvInfo &b) {
  using ::std::swap;
  swap(a.type, b.type);
  swap(a.sendtime, b.sendtime);
  swap(a.status, b.status);
  swap(a.__isset, b.__isset);
}

User_logoff_RecvInfo::User_logoff_RecvInfo(const User_logoff_RecvInfo& other24) noexcept {
  type = other24.type;
  sendtime = other24.sendtime;
  status = other24.status;
  __isset = other24.__isset;
}
User_logoff_RecvInfo& User_logoff_RecvInfo::operator=(const User_logoff_RecvInfo& other25) noexcept {
  type = other25.type;
  sendtime = other25.sendtime;
  status = other25.status;
  __isset = other25.__isset;
  return *this;
}
void User_logoff_RecvInfo::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "User_logoff_RecvInfo(";
  out << "type=" << to_string(type);
  out << ", " << "sendtime=" << to_string(sendtime);
  out << ", " << "status=" << to_string(status);
  out << ")";
}


User_refresh_jwt1_SendInfo::~User_refresh_jwt1_SendInfo() noexcept {
}


void User_refresh_jwt1_SendInfo::__set_type(const int32_t val) {
  this->type = val;
}

void User_refresh_jwt1_SendInfo::__set_sendtime(const int32_t val) {
  this->sendtime = val;
}

void User_refresh_jwt1_SendInfo::__set_jwt_token(const std::string& val) {
  this->jwt_token = val;
}

void User_refresh_jwt1_SendInfo::__set_refresh_jwt_token(const std::string& val) {
  this->refresh_jwt_token = val;
}
std::ostream& operator<<(std::ostream& out, const User_refresh_jwt1_SendInfo& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t User_refresh_jwt1_SendInfo::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->type);
          this->__isset.type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->sendtime);
          this->__isset.sendtime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->jwt_token);
          this->__isset.jwt_token = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->refresh_jwt_token);
          this->__isset.refresh_jwt_token = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t User_refresh_jwt1_SendInfo::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("User_refresh_jwt1_SendInfo");

  xfer += oprot->writeFieldBegin("type", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->type);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("sendtime", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->sendtime);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("jwt_token", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->jwt_token);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("refresh_jwt_token", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->refresh_jwt_token);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(User_refresh_jwt1_SendInfo &a, User_refresh_jwt1_SendInfo &b) {
  using ::std::swap;
  swap(a.type, b.type);
  swap(a.sendtime, b.sendtime);
  swap(a.jwt_token, b.jwt_token);
  swap(a.refresh_jwt_token, b.refresh_jwt_token);
  swap(a.__isset, b.__isset);
}

User_refresh_jwt1_SendInfo::User_refresh_jwt1_SendInfo(const User_refresh_jwt1_SendInfo& other26) {
  type = other26.type;
  sendtime = other26.sendtime;
  jwt_token = other26.jwt_token;
  refresh_jwt_token = other26.refresh_jwt_token;
  __isset = other26.__isset;
}
User_refresh_jwt1_SendInfo& User_refresh_jwt1_SendInfo::operator=(const User_refresh_jwt1_SendInfo& other27) {
  type = other27.type;
  sendtime = other27.sendtime;
  jwt_token = other27.jwt_token;
  refresh_jwt_token = other27.refresh_jwt_token;
  __isset = other27.__isset;
  return *this;
}
void User_refresh_jwt1_SendInfo::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "User_refresh_jwt1_SendInfo(";
  out << "type=" << to_string(type);
  out << ", " << "sendtime=" << to_string(sendtime);
  out << ", " << "jwt_token=" << to_string(jwt_token);
  out << ", " << "refresh_jwt_token=" << to_string(refresh_jwt_token);
  out << ")";
}


User_refresh_jwt1_RecvInfo::~User_refresh_jwt1_RecvInfo() noexcept {
}


void User_refresh_jwt1_RecvInfo::__set_type(const int32_t val) {
  this->type = val;
}

void User_refresh_jwt1_RecvInfo::__set_sendtime(const int32_t val) {
  this->sendtime = val;
}

void User_refresh_jwt1_RecvInfo::__set_status(const int32_t val) {
  this->status = val;
}

void User_refresh_jwt1_RecvInfo::__set_jwt_token(const std::string& val) {
  this->jwt_token = val;
}
std::ostream& operator<<(std::ostream& out, const User_refresh_jwt1_RecvInfo& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t User_refresh_jwt1_RecvInfo::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->type);
          this->__isset.type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->sendtime);
          this->__isset.sendtime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->status);
          this->__isset.status = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->jwt_token);
          this->__isset.jwt_token = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t User_refresh_jwt1_RecvInfo::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("User_refresh_jwt1_RecvInfo");

  xfer += oprot->writeFieldBegin("type", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->type);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("sendtime", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->sendtime);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("status", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->status);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("jwt_token", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->jwt_token);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(User_refresh_jwt1_RecvInfo &a, User_refresh_jwt1_RecvInfo &b) {
  using ::std::swap;
  swap(a.type, b.type);
  swap(a.sendtime, b.sendtime);
  swap(a.status, b.status);
  swap(a.jwt_token, b.jwt_token);
  swap(a.__isset, b.__isset);
}

User_refresh_jwt1_RecvInfo::User_refresh_jwt1_RecvInfo(const User_refresh_jwt1_RecvInfo& other28) {
  type = other28.type;
  sendtime = other28.sendtime;
  status = other28.status;
  jwt_token = other28.jwt_token;
  __isset = other28.__isset;
}
User_refresh_jwt1_RecvInfo& User_refresh_jwt1_RecvInfo::operator=(const User_refresh_jwt1_RecvInfo& other29) {
  type = other29.type;
  sendtime = other29.sendtime;
  status = other29.status;
  jwt_token = other29.jwt_token;
  __isset = other29.__isset;
  return *this;
}
void User_refresh_jwt1_RecvInfo::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "User_refresh_jwt1_RecvInfo(";
  out << "type=" << to_string(type);
  out << ", " << "sendtime=" << to_string(sendtime);
  out << ", " << "status=" << to_string(status);
  out << ", " << "jwt_token=" << to_string(jwt_token);
  out << ")";
}


User_refresh_jwt2_SendInfo::~User_refresh_jwt2_SendInfo() noexcept {
}


void User_refresh_jwt2_SendInfo::__set_type(const int32_t val) {
  this->type = val;
}

void User_refresh_jwt2_SendInfo::__set_sendtime(const int32_t val) {
  this->sendtime = val;
}

void User_refresh_jwt2_SendInfo::__set_jwt_token(const std::string& val) {
  this->jwt_token = val;
}

void User_refresh_jwt2_SendInfo::__set_refresh_jwt_token(const std::string& val) {
  this->refresh_jwt_token = val;
}
std::ostream& operator<<(std::ostream& out, const User_refresh_jwt2_SendInfo& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t User_refresh_jwt2_SendInfo::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->type);
          this->__isset.type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->sendtime);
          this->__isset.sendtime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->jwt_token);
          this->__isset.jwt_token = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->refresh_jwt_token);
          this->__isset.refresh_jwt_token = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t User_refresh_jwt2_SendInfo::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("User_refresh_jwt2_SendInfo");

  xfer += oprot->writeFieldBegin("type", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->type);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("sendtime", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->sendtime);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("jwt_token", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->jwt_token);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("refresh_jwt_token", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->refresh_jwt_token);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(User_refresh_jwt2_SendInfo &a, User_refresh_jwt2_SendInfo &b) {
  using ::std::swap;
  swap(a.type, b.type);
  swap(a.sendtime, b.sendtime);
  swap(a.jwt_token, b.jwt_token);
  swap(a.refresh_jwt_token, b.refresh_jwt_token);
  swap(a.__isset, b.__isset);
}

User_refresh_jwt2_SendInfo::User_refresh_jwt2_SendInfo(const User_refresh_jwt2_SendInfo& other30) {
  type = other30.type;
  sendtime = other30.sendtime;
  jwt_token = other30.jwt_token;
  refresh_jwt_token = other30.refresh_jwt_token;
  __isset = other30.__isset;
}
User_refresh_jwt2_SendInfo& User_refresh_jwt2_SendInfo::operator=(const User_refresh_jwt2_SendInfo& other31) {
  type = other31.type;
  sendtime = other31.sendtime;
  jwt_token = other31.jwt_token;
  refresh_jwt_token = other31.refresh_jwt_token;
  __isset = other31.__isset;
  return *this;
}
void User_refresh_jwt2_SendInfo::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "User_refresh_jwt2_SendInfo(";
  out << "type=" << to_string(type);
  out << ", " << "sendtime=" << to_string(sendtime);
  out << ", " << "jwt_token=" << to_string(jwt_token);
  out << ", " << "refresh_jwt_token=" << to_string(refresh_jwt_token);
  out << ")";
}


User_refresh_jwt2_RecvInfo::~User_refresh_jwt2_RecvInfo() noexcept {
}


void User_refresh_jwt2_RecvInfo::__set_type(const int32_t val) {
  this->type = val;
}

void User_refresh_jwt2_RecvInfo::__set_sendtime(const int32_t val) {
  this->sendtime = val;
}

void User_refresh_jwt2_RecvInfo::__set_status(const int32_t val) {
  this->status = val;
}

void User_refresh_jwt2_RecvInfo::__set_jwt_token(const std::string& val) {
  this->jwt_token = val;
}

void User_refresh_jwt2_RecvInfo::__set_refresh_jwt_token(const std::string& val) {
  this->refresh_jwt_token = val;
}
std::ostream& operator<<(std::ostream& out, const User_refresh_jwt2_RecvInfo& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t User_refresh_jwt2_RecvInfo::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->type);
          this->__isset.type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->sendtime);
          this->__isset.sendtime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->status);
          this->__isset.status = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->jwt_token);
          this->__isset.jwt_token = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->refresh_jwt_token);
          this->__isset.refresh_jwt_token = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t User_refresh_jwt2_RecvInfo::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("User_refresh_jwt2_RecvInfo");

  xfer += oprot->writeFieldBegin("type", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->type);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("sendtime", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->sendtime);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("status", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->status);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("jwt_token", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->jwt_token);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("refresh_jwt_token", ::apache::thrift::protocol::T_STRING, 5);
  xfer += oprot->writeString(this->refresh_jwt_token);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(User_refresh_jwt2_RecvInfo &a, User_refresh_jwt2_RecvInfo &b) {
  using ::std::swap;
  swap(a.type, b.type);
  swap(a.sendtime, b.sendtime);
  swap(a.status, b.status);
  swap(a.jwt_token, b.jwt_token);
  swap(a.refresh_jwt_token, b.refresh_jwt_token);
  swap(a.__isset, b.__isset);
}

User_refresh_jwt2_RecvInfo::User_refresh_jwt2_RecvInfo(const User_refresh_jwt2_RecvInfo& other32) {
  type = other32.type;
  sendtime = other32.sendtime;
  status = other32.status;
  jwt_token = other32.jwt_token;
  refresh_jwt_token = other32.refresh_jwt_token;
  __isset = other32.__isset;
}
User_refresh_jwt2_RecvInfo& User_refresh_jwt2_RecvInfo::operator=(const User_refresh_jwt2_RecvInfo& other33) {
  type = other33.type;
  sendtime = other33.sendtime;
  status = other33.status;
  jwt_token = other33.jwt_token;
  refresh_jwt_token = other33.refresh_jwt_token;
  __isset = other33.__isset;
  return *this;
}
void User_refresh_jwt2_RecvInfo::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "User_refresh_jwt2_RecvInfo(";
  out << "type=" << to_string(type);
  out << ", " << "sendtime=" << to_string(sendtime);
  out << ", " << "status=" << to_string(status);
  out << ", " << "jwt_token=" << to_string(jwt_token);
  out << ", " << "refresh_jwt_token=" << to_string(refresh_jwt_token);
  out << ")";
}


User_friend_SendInfo::~User_friend_SendInfo() noexcept {
}


void User_friend_SendInfo::__set_type(const int32_t val) {
  this->type = val;
}

void User_friend_SendInfo::__set_jwt_token(const std::string& val) {
  this->jwt_token = val;
}

void User_friend_SendInfo::__set_sendtime(const int32_t val) {
  this->sendtime = val;
}
std::ostream& operator<<(std::ostream& out, const User_friend_SendInfo& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t User_friend_SendInfo::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->type);
          this->__isset.type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->jwt_token);
          this->__isset.jwt_token = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->sendtime);
          this->__isset.sendtime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t User_friend_SendInfo::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("User_friend_SendInfo");

  xfer += oprot->writeFieldBegin("type", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->type);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("jwt_token", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->jwt_token);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("sendtime", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->sendtime);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(User_friend_SendInfo &a, User_friend_SendInfo &b) {
  using ::std::swap;
  swap(a.type, b.type);
  swap(a.jwt_token, b.jwt_token);
  swap(a.sendtime, b.sendtime);
  swap(a.__isset, b.__isset);
}

User_friend_SendInfo::User_friend_SendInfo(const User_friend_SendInfo& other34) {
  type = other34.type;
  jwt_token = other34.jwt_token;
  sendtime = other34.sendtime;
  __isset = other34.__isset;
}
User_friend_SendInfo& User_friend_SendInfo::operator=(const User_friend_SendInfo& other35) {
  type = other35.type;
  jwt_token = other35.jwt_token;
  sendtime = other35.sendtime;
  __isset = other35.__isset;
  return *this;
}
void User_friend_SendInfo::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "User_friend_SendInfo(";
  out << "type=" << to_string(type);
  out << ", " << "jwt_token=" << to_string(jwt_token);
  out << ", " << "sendtime=" << to_string(sendtime);
  out << ")";
}


User_friend_RecvInfo::~User_friend_RecvInfo() noexcept {
}


void User_friend_RecvInfo::__set_type(const int32_t val) {
  this->type = val;
}

void User_friend_RecvInfo::__set_sendtime(const int32_t val) {
  this->sendtime = val;
}

void User_friend_RecvInfo::__set_status(const int32_t val) {
  this->status = val;
}

void User_friend_RecvInfo::__set_info(const std::string& val) {
  this->info = val;
}
std::ostream& operator<<(std::ostream& out, const User_friend_RecvInfo& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t User_friend_RecvInfo::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->type);
          this->__isset.type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->sendtime);
          this->__isset.sendtime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->status);
          this->__isset.status = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->info);
          this->__isset.info = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t User_friend_RecvInfo::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("User_friend_RecvInfo");

  xfer += oprot->writeFieldBegin("type", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->type);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("sendtime", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->sendtime);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("status", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->status);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("info", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->info);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(User_friend_RecvInfo &a, User_friend_RecvInfo &b) {
  using ::std::swap;
  swap(a.type, b.type);
  swap(a.sendtime, b.sendtime);
  swap(a.status, b.status);
  swap(a.info, b.info);
  swap(a.__isset, b.__isset);
}

User_friend_RecvInfo::User_friend_RecvInfo(const User_friend_RecvInfo& other36) {
  type = other36.type;
  sendtime = other36.sendtime;
  status = other36.status;
  info = other36.info;
  __isset = other36.__isset;
}
User_friend_RecvInfo& User_friend_RecvInfo::operator=(const User_friend_RecvInfo& other37) {
  type = other37.type;
  sendtime = other37.sendtime;
  status = other37.status;
  info = other37.info;
  __isset = other37.__isset;
  return *this;
}
void User_friend_RecvInfo::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "User_friend_RecvInfo(";
  out << "type=" << to_string(type);
  out << ", " << "sendtime=" << to_string(sendtime);
  out << ", " << "status=" << to_string(status);
  out << ", " << "info=" << to_string(info);
  out << ")";
}


User_follow_SendInfo::~User_follow_SendInfo() noexcept {
}


void User_follow_SendInfo::__set_type(const int32_t val) {
  this->type = val;
}

void User_follow_SendInfo::__set_jwt_token(const std::string& val) {
  this->jwt_token = val;
}

void User_follow_SendInfo::__set_sendtime(const int32_t val) {
  this->sendtime = val;
}
std::ostream& operator<<(std::ostream& out, const User_follow_SendInfo& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t User_follow_SendInfo::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->type);
          this->__isset.type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->jwt_token);
          this->__isset.jwt_token = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->sendtime);
          this->__isset.sendtime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t User_follow_SendInfo::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("User_follow_SendInfo");

  xfer += oprot->writeFieldBegin("type", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->type);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("jwt_token", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->jwt_token);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("sendtime", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->sendtime);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(User_follow_SendInfo &a, User_follow_SendInfo &b) {
  using ::std::swap;
  swap(a.type, b.type);
  swap(a.jwt_token, b.jwt_token);
  swap(a.sendtime, b.sendtime);
  swap(a.__isset, b.__isset);
}

User_follow_SendInfo::User_follow_SendInfo(const User_follow_SendInfo& other38) {
  type = other38.type;
  jwt_token = other38.jwt_token;
  sendtime = other38.sendtime;
  __isset = other38.__isset;
}
User_follow_SendInfo& User_follow_SendInfo::operator=(const User_follow_SendInfo& other39) {
  type = other39.type;
  jwt_token = other39.jwt_token;
  sendtime = other39.sendtime;
  __isset = other39.__isset;
  return *this;
}
void User_follow_SendInfo::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "User_follow_SendInfo(";
  out << "type=" << to_string(type);
  out << ", " << "jwt_token=" << to_string(jwt_token);
  out << ", " << "sendtime=" << to_string(sendtime);
  out << ")";
}


User_follow_RecvInfo::~User_follow_RecvInfo() noexcept {
}


void User_follow_RecvInfo::__set_type(const int32_t val) {
  this->type = val;
}

void User_follow_RecvInfo::__set_sendtime(const int32_t val) {
  this->sendtime = val;
}

void User_follow_RecvInfo::__set_status(const int32_t val) {
  this->status = val;
}

void User_follow_RecvInfo::__set_info(const std::string& val) {
  this->info = val;
}
std::ostream& operator<<(std::ostream& out, const User_follow_RecvInfo& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t User_follow_RecvInfo::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->type);
          this->__isset.type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->sendtime);
          this->__isset.sendtime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->status);
          this->__isset.status = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->info);
          this->__isset.info = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t User_follow_RecvInfo::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("User_follow_RecvInfo");

  xfer += oprot->writeFieldBegin("type", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->type);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("sendtime", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->sendtime);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("status", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->status);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("info", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->info);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(User_follow_RecvInfo &a, User_follow_RecvInfo &b) {
  using ::std::swap;
  swap(a.type, b.type);
  swap(a.sendtime, b.sendtime);
  swap(a.status, b.status);
  swap(a.info, b.info);
  swap(a.__isset, b.__isset);
}

User_follow_RecvInfo::User_follow_RecvInfo(const User_follow_RecvInfo& other40) {
  type = other40.type;
  sendtime = other40.sendtime;
  status = other40.status;
  info = other40.info;
  __isset = other40.__isset;
}
User_follow_RecvInfo& User_follow_RecvInfo::operator=(const User_follow_RecvInfo& other41) {
  type = other41.type;
  sendtime = other41.sendtime;
  status = other41.status;
  info = other41.info;
  __isset = other41.__isset;
  return *this;
}
void User_follow_RecvInfo::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "User_follow_RecvInfo(";
  out << "type=" << to_string(type);
  out << ", " << "sendtime=" << to_string(sendtime);
  out << ", " << "status=" << to_string(status);
  out << ", " << "info=" << to_string(info);
  out << ")";
}


User_followed_SendInfo::~User_followed_SendInfo() noexcept {
}


void User_followed_SendInfo::__set_type(const int32_t val) {
  this->type = val;
}

void User_followed_SendInfo::__set_jwt_token(const std::string& val) {
  this->jwt_token = val;
}

void User_followed_SendInfo::__set_sendtime(const int32_t val) {
  this->sendtime = val;
}
std::ostream& operator<<(std::ostream& out, const User_followed_SendInfo& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t User_followed_SendInfo::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->type);
          this->__isset.type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->jwt_token);
          this->__isset.jwt_token = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->sendtime);
          this->__isset.sendtime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t User_followed_SendInfo::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("User_followed_SendInfo");

  xfer += oprot->writeFieldBegin("type", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->type);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("jwt_token", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->jwt_token);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("sendtime", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->sendtime);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(User_followed_SendInfo &a, User_followed_SendInfo &b) {
  using ::std::swap;
  swap(a.type, b.type);
  swap(a.jwt_token, b.jwt_token);
  swap(a.sendtime, b.sendtime);
  swap(a.__isset, b.__isset);
}

User_followed_SendInfo::User_followed_SendInfo(const User_followed_SendInfo& other42) {
  type = other42.type;
  jwt_token = other42.jwt_token;
  sendtime = other42.sendtime;
  __isset = other42.__isset;
}
User_followed_SendInfo& User_followed_SendInfo::operator=(const User_followed_SendInfo& other43) {
  type = other43.type;
  jwt_token = other43.jwt_token;
  sendtime = other43.sendtime;
  __isset = other43.__isset;
  return *this;
}
void User_followed_SendInfo::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "User_followed_SendInfo(";
  out << "type=" << to_string(type);
  out << ", " << "jwt_token=" << to_string(jwt_token);
  out << ", " << "sendtime=" << to_string(sendtime);
  out << ")";
}


User_followed_RecvInfo::~User_followed_RecvInfo() noexcept {
}


void User_followed_RecvInfo::__set_type(const int32_t val) {
  this->type = val;
}

void User_followed_RecvInfo::__set_sendtime(const int32_t val) {
  this->sendtime = val;
}

void User_followed_RecvInfo::__set_status(const int32_t val) {
  this->status = val;
}

void User_followed_RecvInfo::__set_info(const std::string& val) {
  this->info = val;
}
std::ostream& operator<<(std::ostream& out, const User_followed_RecvInfo& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t User_followed_RecvInfo::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->type);
          this->__isset.type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->sendtime);
          this->__isset.sendtime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->status);
          this->__isset.status = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->info);
          this->__isset.info = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t User_followed_RecvInfo::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("User_followed_RecvInfo");

  xfer += oprot->writeFieldBegin("type", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->type);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("sendtime", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->sendtime);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("status", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->status);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("info", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->info);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(User_followed_RecvInfo &a, User_followed_RecvInfo &b) {
  using ::std::swap;
  swap(a.type, b.type);
  swap(a.sendtime, b.sendtime);
  swap(a.status, b.status);
  swap(a.info, b.info);
  swap(a.__isset, b.__isset);
}

User_followed_RecvInfo::User_followed_RecvInfo(const User_followed_RecvInfo& other44) {
  type = other44.type;
  sendtime = other44.sendtime;
  status = other44.status;
  info = other44.info;
  __isset = other44.__isset;
}
User_followed_RecvInfo& User_followed_RecvInfo::operator=(const User_followed_RecvInfo& other45) {
  type = other45.type;
  sendtime = other45.sendtime;
  status = other45.status;
  info = other45.info;
  __isset = other45.__isset;
  return *this;
}
void User_followed_RecvInfo::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "User_followed_RecvInfo(";
  out << "type=" << to_string(type);
  out << ", " << "sendtime=" << to_string(sendtime);
  out << ", " << "status=" << to_string(status);
  out << ", " << "info=" << to_string(info);
  out << ")";
}


User_ModifyBaseInfo_SendInfo::~User_ModifyBaseInfo_SendInfo() noexcept {
}


void User_ModifyBaseInfo_SendInfo::__set_type(const int32_t val) {
  this->type = val;
}

void User_ModifyBaseInfo_SendInfo::__set_jwt_token(const std::string& val) {
  this->jwt_token = val;
}

void User_ModifyBaseInfo_SendInfo::__set_sendtime(const int32_t val) {
  this->sendtime = val;
}

void User_ModifyBaseInfo_SendInfo::__set_modifyinfo(const std::string& val) {
  this->modifyinfo = val;
}
std::ostream& operator<<(std::ostream& out, const User_ModifyBaseInfo_SendInfo& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t User_ModifyBaseInfo_SendInfo::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->type);
          this->__isset.type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->jwt_token);
          this->__isset.jwt_token = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->sendtime);
          this->__isset.sendtime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->modifyinfo);
          this->__isset.modifyinfo = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t User_ModifyBaseInfo_SendInfo::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("User_ModifyBaseInfo_SendInfo");

  xfer += oprot->writeFieldBegin("type", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->type);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("jwt_token", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->jwt_token);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("sendtime", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->sendtime);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("modifyinfo", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->modifyinfo);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(User_ModifyBaseInfo_SendInfo &a, User_ModifyBaseInfo_SendInfo &b) {
  using ::std::swap;
  swap(a.type, b.type);
  swap(a.jwt_token, b.jwt_token);
  swap(a.sendtime, b.sendtime);
  swap(a.modifyinfo, b.modifyinfo);
  swap(a.__isset, b.__isset);
}

User_ModifyBaseInfo_SendInfo::User_ModifyBaseInfo_SendInfo(const User_ModifyBaseInfo_SendInfo& other46) {
  type = other46.type;
  jwt_token = other46.jwt_token;
  sendtime = other46.sendtime;
  modifyinfo = other46.modifyinfo;
  __isset = other46.__isset;
}
User_ModifyBaseInfo_SendInfo& User_ModifyBaseInfo_SendInfo::operator=(const User_ModifyBaseInfo_SendInfo& other47) {
  type = other47.type;
  jwt_token = other47.jwt_token;
  sendtime = other47.sendtime;
  modifyinfo = other47.modifyinfo;
  __isset = other47.__isset;
  return *this;
}
void User_ModifyBaseInfo_SendInfo::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "User_ModifyBaseInfo_SendInfo(";
  out << "type=" << to_string(type);
  out << ", " << "jwt_token=" << to_string(jwt_token);
  out << ", " << "sendtime=" << to_string(sendtime);
  out << ", " << "modifyinfo=" << to_string(modifyinfo);
  out << ")";
}


User_ModifyBaseInfo_RecvInfo::~User_ModifyBaseInfo_RecvInfo() noexcept {
}


void User_ModifyBaseInfo_RecvInfo::__set_type(const int32_t val) {
  this->type = val;
}

void User_ModifyBaseInfo_RecvInfo::__set_sendtime(const int32_t val) {
  this->sendtime = val;
}

void User_ModifyBaseInfo_RecvInfo::__set_status(const int32_t val) {
  this->status = val;
}
std::ostream& operator<<(std::ostream& out, const User_ModifyBaseInfo_RecvInfo& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t User_ModifyBaseInfo_RecvInfo::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->type);
          this->__isset.type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->sendtime);
          this->__isset.sendtime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->status);
          this->__isset.status = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t User_ModifyBaseInfo_RecvInfo::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("User_ModifyBaseInfo_RecvInfo");

  xfer += oprot->writeFieldBegin("type", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->type);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("sendtime", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->sendtime);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("status", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->status);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(User_ModifyBaseInfo_RecvInfo &a, User_ModifyBaseInfo_RecvInfo &b) {
  using ::std::swap;
  swap(a.type, b.type);
  swap(a.sendtime, b.sendtime);
  swap(a.status, b.status);
  swap(a.__isset, b.__isset);
}

User_ModifyBaseInfo_RecvInfo::User_ModifyBaseInfo_RecvInfo(const User_ModifyBaseInfo_RecvInfo& other48) noexcept {
  type = other48.type;
  sendtime = other48.sendtime;
  status = other48.status;
  __isset = other48.__isset;
}
User_ModifyBaseInfo_RecvInfo& User_ModifyBaseInfo_RecvInfo::operator=(const User_ModifyBaseInfo_RecvInfo& other49) noexcept {
  type = other49.type;
  sendtime = other49.sendtime;
  status = other49.status;
  __isset = other49.__isset;
  return *this;
}
void User_ModifyBaseInfo_RecvInfo::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "User_ModifyBaseInfo_RecvInfo(";
  out << "type=" << to_string(type);
  out << ", " << "sendtime=" << to_string(sendtime);
  out << ", " << "status=" << to_string(status);
  out << ")";
}


User_ModifySocialInfo_SendInfo::~User_ModifySocialInfo_SendInfo() noexcept {
}


void User_ModifySocialInfo_SendInfo::__set_type(const int32_t val) {
  this->type = val;
}

void User_ModifySocialInfo_SendInfo::__set_jwt_token(const std::string& val) {
  this->jwt_token = val;
}

void User_ModifySocialInfo_SendInfo::__set_sendtime(const int32_t val) {
  this->sendtime = val;
}

void User_ModifySocialInfo_SendInfo::__set_modifyinfo(const std::string& val) {
  this->modifyinfo = val;
}
std::ostream& operator<<(std::ostream& out, const User_ModifySocialInfo_SendInfo& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t User_ModifySocialInfo_SendInfo::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->type);
          this->__isset.type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->jwt_token);
          this->__isset.jwt_token = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->sendtime);
          this->__isset.sendtime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->modifyinfo);
          this->__isset.modifyinfo = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t User_ModifySocialInfo_SendInfo::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("User_ModifySocialInfo_SendInfo");

  xfer += oprot->writeFieldBegin("type", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->type);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("jwt_token", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->jwt_token);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("sendtime", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->sendtime);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("modifyinfo", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->modifyinfo);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(User_ModifySocialInfo_SendInfo &a, User_ModifySocialInfo_SendInfo &b) {
  using ::std::swap;
  swap(a.type, b.type);
  swap(a.jwt_token, b.jwt_token);
  swap(a.sendtime, b.sendtime);
  swap(a.modifyinfo, b.modifyinfo);
  swap(a.__isset, b.__isset);
}

User_ModifySocialInfo_SendInfo::User_ModifySocialInfo_SendInfo(const User_ModifySocialInfo_SendInfo& other50) {
  type = other50.type;
  jwt_token = other50.jwt_token;
  sendtime = other50.sendtime;
  modifyinfo = other50.modifyinfo;
  __isset = other50.__isset;
}
User_ModifySocialInfo_SendInfo& User_ModifySocialInfo_SendInfo::operator=(const User_ModifySocialInfo_SendInfo& other51) {
  type = other51.type;
  jwt_token = other51.jwt_token;
  sendtime = other51.sendtime;
  modifyinfo = other51.modifyinfo;
  __isset = other51.__isset;
  return *this;
}
void User_ModifySocialInfo_SendInfo::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "User_ModifySocialInfo_SendInfo(";
  out << "type=" << to_string(type);
  out << ", " << "jwt_token=" << to_string(jwt_token);
  out << ", " << "sendtime=" << to_string(sendtime);
  out << ", " << "modifyinfo=" << to_string(modifyinfo);
  out << ")";
}


User_ModifySocialInfo_RecvInfo::~User_ModifySocialInfo_RecvInfo() noexcept {
}


void User_ModifySocialInfo_RecvInfo::__set_type(const int32_t val) {
  this->type = val;
}

void User_ModifySocialInfo_RecvInfo::__set_sendtime(const int32_t val) {
  this->sendtime = val;
}

void User_ModifySocialInfo_RecvInfo::__set_status(const int32_t val) {
  this->status = val;
}
std::ostream& operator<<(std::ostream& out, const User_ModifySocialInfo_RecvInfo& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t User_ModifySocialInfo_RecvInfo::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->type);
          this->__isset.type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->sendtime);
          this->__isset.sendtime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->status);
          this->__isset.status = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t User_ModifySocialInfo_RecvInfo::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("User_ModifySocialInfo_RecvInfo");

  xfer += oprot->writeFieldBegin("type", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->type);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("sendtime", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->sendtime);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("status", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->status);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(User_ModifySocialInfo_RecvInfo &a, User_ModifySocialInfo_RecvInfo &b) {
  using ::std::swap;
  swap(a.type, b.type);
  swap(a.sendtime, b.sendtime);
  swap(a.status, b.status);
  swap(a.__isset, b.__isset);
}

User_ModifySocialInfo_RecvInfo::User_ModifySocialInfo_RecvInfo(const User_ModifySocialInfo_RecvInfo& other52) noexcept {
  type = other52.type;
  sendtime = other52.sendtime;
  status = other52.status;
  __isset = other52.__isset;
}
User_ModifySocialInfo_RecvInfo& User_ModifySocialInfo_RecvInfo::operator=(const User_ModifySocialInfo_RecvInfo& other53) noexcept {
  type = other53.type;
  sendtime = other53.sendtime;
  status = other53.status;
  __isset = other53.__isset;
  return *this;
}
void User_ModifySocialInfo_RecvInfo::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "User_ModifySocialInfo_RecvInfo(";
  out << "type=" << to_string(type);
  out << ", " << "sendtime=" << to_string(sendtime);
  out << ", " << "status=" << to_string(status);
  out << ")";
}


User_ModifyExInfo_SendInfo::~User_ModifyExInfo_SendInfo() noexcept {
}


void User_ModifyExInfo_SendInfo::__set_type(const int32_t val) {
  this->type = val;
}

void User_ModifyExInfo_SendInfo::__set_jwt_token(const std::string& val) {
  this->jwt_token = val;
}

void User_ModifyExInfo_SendInfo::__set_sendtime(const int32_t val) {
  this->sendtime = val;
}

void User_ModifyExInfo_SendInfo::__set_modifyinfo(const std::string& val) {
  this->modifyinfo = val;
}
std::ostream& operator<<(std::ostream& out, const User_ModifyExInfo_SendInfo& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t User_ModifyExInfo_SendInfo::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->type);
          this->__isset.type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->jwt_token);
          this->__isset.jwt_token = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->sendtime);
          this->__isset.sendtime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->modifyinfo);
          this->__isset.modifyinfo = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t User_ModifyExInfo_SendInfo::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("User_ModifyExInfo_SendInfo");

  xfer += oprot->writeFieldBegin("type", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->type);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("jwt_token", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->jwt_token);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("sendtime", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->sendtime);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("modifyinfo", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->modifyinfo);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(User_ModifyExInfo_SendInfo &a, User_ModifyExInfo_SendInfo &b) {
  using ::std::swap;
  swap(a.type, b.type);
  swap(a.jwt_token, b.jwt_token);
  swap(a.sendtime, b.sendtime);
  swap(a.modifyinfo, b.modifyinfo);
  swap(a.__isset, b.__isset);
}

User_ModifyExInfo_SendInfo::User_ModifyExInfo_SendInfo(const User_ModifyExInfo_SendInfo& other54) {
  type = other54.type;
  jwt_token = other54.jwt_token;
  sendtime = other54.sendtime;
  modifyinfo = other54.modifyinfo;
  __isset = other54.__isset;
}
User_ModifyExInfo_SendInfo& User_ModifyExInfo_SendInfo::operator=(const User_ModifyExInfo_SendInfo& other55) {
  type = other55.type;
  jwt_token = other55.jwt_token;
  sendtime = other55.sendtime;
  modifyinfo = other55.modifyinfo;
  __isset = other55.__isset;
  return *this;
}
void User_ModifyExInfo_SendInfo::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "User_ModifyExInfo_SendInfo(";
  out << "type=" << to_string(type);
  out << ", " << "jwt_token=" << to_string(jwt_token);
  out << ", " << "sendtime=" << to_string(sendtime);
  out << ", " << "modifyinfo=" << to_string(modifyinfo);
  out << ")";
}


User_ModifyExInfo_RecvInfo::~User_ModifyExInfo_RecvInfo() noexcept {
}


void User_ModifyExInfo_RecvInfo::__set_type(const int32_t val) {
  this->type = val;
}

void User_ModifyExInfo_RecvInfo::__set_sendtime(const int32_t val) {
  this->sendtime = val;
}

void User_ModifyExInfo_RecvInfo::__set_status(const int32_t val) {
  this->status = val;
}
std::ostream& operator<<(std::ostream& out, const User_ModifyExInfo_RecvInfo& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t User_ModifyExInfo_RecvInfo::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->type);
          this->__isset.type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->sendtime);
          this->__isset.sendtime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->status);
          this->__isset.status = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t User_ModifyExInfo_RecvInfo::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("User_ModifyExInfo_RecvInfo");

  xfer += oprot->writeFieldBegin("type", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->type);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("sendtime", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->sendtime);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("status", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->status);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(User_ModifyExInfo_RecvInfo &a, User_ModifyExInfo_RecvInfo &b) {
  using ::std::swap;
  swap(a.type, b.type);
  swap(a.sendtime, b.sendtime);
  swap(a.status, b.status);
  swap(a.__isset, b.__isset);
}

User_ModifyExInfo_RecvInfo::User_ModifyExInfo_RecvInfo(const User_ModifyExInfo_RecvInfo& other56) noexcept {
  type = other56.type;
  sendtime = other56.sendtime;
  status = other56.status;
  __isset = other56.__isset;
}
User_ModifyExInfo_RecvInfo& User_ModifyExInfo_RecvInfo::operator=(const User_ModifyExInfo_RecvInfo& other57) noexcept {
  type = other57.type;
  sendtime = other57.sendtime;
  status = other57.status;
  __isset = other57.__isset;
  return *this;
}
void User_ModifyExInfo_RecvInfo::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "User_ModifyExInfo_RecvInfo(";
  out << "type=" << to_string(type);
  out << ", " << "sendtime=" << to_string(sendtime);
  out << ", " << "status=" << to_string(status);
  out << ")";
}


